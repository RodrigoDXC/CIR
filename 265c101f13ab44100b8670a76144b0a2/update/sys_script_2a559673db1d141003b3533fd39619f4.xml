<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>true</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_fru_cir_situation</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_fru_cir_situation">countryISNOTEMPTY^dimensionISNOTEMPTY^countryVALCHANGES^ORdimensionVALCHANGES^ORparametrizationVALCHANGES^EQ<item endquery="false" field="country" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="dimension" goto="false" newquery="false" operator="ISNOTEMPTY" or="false" value=""/>
            <item endquery="false" field="country" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="false" field="dimension" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item endquery="false" field="parametrization" goto="false" newquery="false" operator="VALCHANGES" or="true" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>cir_assign_escalation_level </name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	var escalationLevels = [];
	var order = '0';

	// get current order of the current escalation levels if not empty
	if (current.getValue('escalation_level')) {
		var grCurrentEscl = new GlideRecord(CIRConstants.Tables.SITUATION_ESCALATION_LEVEL);
		grCurrentEscl.addQuery('sys_id', 'IN', current.getValue('escalation_level'));
		grCurrentEscl.query();
		if (grCurrentEscl.next()) {
			order = grCurrentEscl.getValue('order');
		}
	}
	
	var countries = current.getDisplayValue('country');

	// getting the escalation teams
	var escalationTeams = [];
	var grEscalation = new GlideRecord(CIRConstants.Tables.SITUATION_ESCALATION_LEVEL);
	//grEscalation.addQuery('country', 'IN', countries + ''); // it is not possible to compare display values with internal values (they are always in english)
	grEscalation.addQuery('dimension', current.getValue('dimension'));
	grEscalation.addQuery('order', order);
	if (current.getValue('parametrization')) {
		grEscalation.addEncodedQuery('default=true^ORparametrizationIN' + current.getValue('parametrization'));
	} else {
		grEscalation.addQuery('default',true);
	}
	grEscalation.orderByDesc('default'); // order by default to start with the default ones
	grEscalation.query();
	while (grEscalation.next()) {
		if (countries && countries.indexOf(grEscalation.getDisplayValue('country')) != -1) {
			
			// creating obj aux to keep the values to be compared with the custom escalation teams of the parametrizations
			var objAux = {
				'sys_id': grEscalation.getUniqueValue(),
				'name': grEscalation.getValue('level_name'),
				'contact_list': grEscalation.getValue('contact_list')
			};

			// it will return the object which contains the same name and contact list
			var escalationFiltered = escalationTeams.filter(function(el) { return el.name == objAux.name && el.contact_list == objAux.contact_list;});

			// if there's no object with the same name and contact list, the object is pushed into the array
			if (escalationFiltered.length == 0) {
				escalationTeams.push(objAux);
			}
		}
	}
	if (escalationTeams.length != 0) {
		escalationLevels = escalationTeams.map(function(el) { return el.sys_id; }); // return only the sys_ids
	}
	current.setValue('escalation_level', escalationLevels.toString());

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>Paulo.Gomes@fruitionpartners.pt</sys_created_by>
        <sys_created_on>2020-06-16 13:01:40</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>2a559673db1d141003b3533fd39619f4</sys_id>
        <sys_mod_count>1</sys_mod_count>
        <sys_name>cir_assign_escalation_level </sys_name>
        <sys_overrides/>
        <sys_package display_value="Corporate Incident Response" source="x_fru_cir">265c101f13ab44100b8670a76144b0a2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Corporate Incident Response">265c101f13ab44100b8670a76144b0a2</sys_scope>
        <sys_update_name>sys_script_2a559673db1d141003b3533fd39619f4</sys_update_name>
        <sys_updated_by>Paulo.Gomes@fruitionpartners.pt</sys_updated_by>
        <sys_updated_on>2020-06-23 13:12:17</sys_updated_on>
        <template/>
        <when>before</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=2a559673db1d141003b3533fd39619f4"/>
</record_update>
