<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>public</access>
        <active>true</active>
        <api_name>x_fru_cir.CIRPSIAccessManagerFP</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>CIRPSIAccessManagerFP</name>
        <script><![CDATA[var CIRPSIAccessManagerFP =  (function() {
	var CIRPSIAccessManagerFP = Class.create();
	var initialize = function() {};
	
	var tables = CIRConstants.Tables;
	
	/**
	 * Function taht will check if a user has access to the PSI related record
	 * called in multiple ACLs for both external and internal tables
	 * @return {boolean} : true if user can access the record, false if it doesn't
	 */
	var checkAccess = function () {
		var table = current.getTableName();
		var answer = false;
		switch (table) {
			case tables.PSI_INTERNAL:
				answer = checkPSIInternalAccess();
				break;

			case tables.PSI_EXTERNAL:
				answer = checkPSIExternalAccess();
				break;

			case tables.PSI_CATEGORY:
				answer = checkPSICategoryAccess();
				break;
				
			case tables.SECURITY_LOCATION:
				answer = checkLocationAccess();	
				break;
		}

		return answer;
	};

	/**
	 * Function taht will check if a user has access to the PSI Internal records
	 * called in checkAccess
	 * @return {boolean} : true if user can access the record, false if it doesn't
	 */
	var checkPSIInternalAccess = function () {
		var answer = false;
		
		if(current.isNewRecord()) {
			answer = true;
		} else if(gs.hasRole('x_fru_cir.psi_internal_manager') || current.isNewRecord()) {
			answer = true;
		} else if(gs.hasRole('x_fru_cir.psi_internal_user') || current.isNewRecord()) {
			answer = current.getValue('sys_created_by') === gs.getUserName();
		}
		return answer;
	};

	/**
	 * Function taht will check if a user has access to the PSI External records
	 * called in checkAccess
	 * @return {boolean} : true if user can access the record, false if it doesn't
	 */
	var checkPSIExternalAccess = function () {
		if(gs.hasRole('x_fru_cir.psi_global_manager') || current.isNewRecord()) {
			answer = true;
		} else if(gs.hasRole('x_fru_cir.psi_local_manager')) {
			answer = checkCountry();
		}
		return answer;
	};

	/**
	 * Function taht will check if a user country is the same as the Incidnet record
	 * called in checkPSIExternalAccess
	 * @return {boolean} : true if the user country is the same , false if it doesn't
	 */
	var checkCountry = function () {
		var userCountry = new CIRPSIUtils().GetCurrentUserRecord().getDisplayValue('country');
		var userCountryValue = new CIRPSIUtils().GetChoiceForCountry(userCountry) + '';

		return userCountryValue === current.getValue('country');
	};

	
	/**
	 * Function taht will check if a user has access to a PSI Category record
	 * called in checkAccess
	 * @return {boolean} : true if user can access the record, false if it doesn't
	 */
	var checkPSICategoryAccess = function () {
		var answer = false;
		
		if(current.isNewRecord()) {
			answer = true;

		} else if (gs.hasRole('x_fru_cir.psi_internal_manager,x_fru_cir.psi_internal_user') && current.getValue('type') === '1') { 
			answer = true;
			
		} else if (gs.hasRole('x_fru_cir.psi_global_manager,x_fru_cir.psi_local_manager') && current.getValue('type') === '0') { 
			answer = true;
		}
		return answer;
	};
	
	/**
	 * Function taht will check if a user has access to a Security Location record
	 * called in checkAccess
	 * @return {boolean} : true if user can access the record, false if it doesn't
	 */
	var checkLocationAccess = function() {
		var answer = true;
		if(gs.hasRole('x_fru_cir.psi_global_manager') || current.isNewRecord()) {
			answer = true;
			
		} else if(gs.hasRole('x_fru_cir.psi_local_manager')) {
			answer = checkCountry();
		}
		return answer;
	};

	CIRPSIAccessManagerFP.prototype = {
		initialize: initialize,
		CheckAccess : checkAccess
	};
	
	return CIRPSIAccessManagerFP;
})();]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>hugo.reis</sys_created_by>
        <sys_created_on>2020-07-02 09:11:28</sys_created_on>
        <sys_id>be3ee3b0dbf19010bf9ead8ed39619f5</sys_id>
        <sys_mod_count>14</sys_mod_count>
        <sys_name>CIRPSIAccessManagerFP</sys_name>
        <sys_package display_value="Corporate Incident Response" source="x_fru_cir">265c101f13ab44100b8670a76144b0a2</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Corporate Incident Response">265c101f13ab44100b8670a76144b0a2</sys_scope>
        <sys_update_name>sys_script_include_be3ee3b0dbf19010bf9ead8ed39619f5</sys_update_name>
        <sys_updated_by>hugo.reis</sys_updated_by>
        <sys_updated_on>2020-08-10 12:55:51</sys_updated_on>
    </sys_script_include>
</record_update>
