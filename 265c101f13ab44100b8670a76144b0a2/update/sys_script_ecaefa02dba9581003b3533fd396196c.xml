<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_script">
    <sys_script action="INSERT_OR_UPDATE">
        <abort_action>false</abort_action>
        <access>package_private</access>
        <action_delete>false</action_delete>
        <action_insert>false</action_insert>
        <action_query>false</action_query>
        <action_update>true</action_update>
        <active>true</active>
        <add_message>false</add_message>
        <advanced>true</advanced>
        <change_fields>false</change_fields>
        <client_callable>false</client_callable>
        <collection>x_fru_cir_response_plan_step</collection>
        <condition/>
        <description/>
        <execute_function>false</execute_function>
        <filter_condition table="x_fru_cir_response_plan_step">activeVALCHANGES^EQ<item endquery="false" field="active" goto="false" newquery="false" operator="VALCHANGES" or="false" value=""/>
            <item endquery="true" field="" goto="false" newquery="false" operator="=" or="false" value=""/>
        </filter_condition>
        <is_rest>false</is_rest>
        <message/>
        <name>cir_act_on_active_field_changing</name>
        <order>100</order>
        <priority>100</priority>
        <rest_method/>
        <rest_method_text/>
        <rest_service/>
        <rest_service_text/>
        <rest_variables/>
        <role_conditions/>
        <script><![CDATA[(function executeRule(current, previous /*null when async*/) {

	if (!current.active) {
		//fetch steps that are dependent_on the current record and set the dependent_on field on those to the dependent_on from current record
		var children  = new GlideRecord(CIRConstants.Tables.RESP_PLAN_STEP);
		children.addEncodedQuery('dependent_on=' + current.sys_id);
		children.query();
		
		while (children.next()){
			var dependent = children.dependent_on.split(",");
			var newDependents = [];
			
			for (var i = 0; i < dependent.length; i++){
				if (dependent[i] != current.sys_id){
					newDependents.push(dependent[i]);
				}
			}
			
			newDependents.push(current.dependent_on);
			children.dependent_on = newDependents.toString();
			children.order = current.order;
			children.update();
		}
		
		var steps = new GlideRecord(CIRConstants.Tables.RESP_PLAN_STEP);
		steps.addEncodedQuery('response_plan_template=' + current.response_plan_template + "^order>" + current.order);
		steps.query();
		
		while(steps.next()){
			steps.order = steps.order - 1;
			steps.update();
		}
	}

})(current, previous);]]></script>
        <sys_class_name>sys_script</sys_class_name>
        <sys_created_by>Paulo.Gomes@fruitionpartners.pt</sys_created_by>
        <sys_created_on>2020-06-23 15:47:26</sys_created_on>
        <sys_domain>global</sys_domain>
        <sys_domain_path>/</sys_domain_path>
        <sys_id>ecaefa02dba9581003b3533fd396196c</sys_id>
        <sys_mod_count>8</sys_mod_count>
        <sys_name>cir_act_on_active_field_changing</sys_name>
        <sys_overrides/>
        <sys_package display_value="Corporate Incident Response" source="x_fru_cir">265c101f13ab44100b8670a76144b0a2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Corporate Incident Response">265c101f13ab44100b8670a76144b0a2</sys_scope>
        <sys_update_name>sys_script_ecaefa02dba9581003b3533fd396196c</sys_update_name>
        <sys_updated_by>hugo.reis</sys_updated_by>
        <sys_updated_on>2020-08-10 08:23:54</sys_updated_on>
        <template/>
        <when>after</when>
    </sys_script>
    <sys_translated_text action="delete_multiple" query="documentkey=ecaefa02dba9581003b3533fd396196c"/>
</record_update>
