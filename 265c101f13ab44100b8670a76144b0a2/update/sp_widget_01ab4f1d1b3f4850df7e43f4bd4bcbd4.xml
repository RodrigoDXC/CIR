<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>standard</category>
        <client_script><![CDATA[function spTicketConversation($scope, spModal, nowAttachmentHandler, $animate, $rootScope, cabrillo, $timeout, snRecordWatcher, spUtil, spAriaUtil, $http, $window, $uibModal) {
	var c = this;
	var newInput = {};
	var currentTab = 'chat';
	var lastMessageTime = '';
	var lastMessageSender = '';

	$scope.msg = "";
	$scope.isNative = cabrillo.isNative();
	$scope.errorMessages = [];

	var existingEntries = {};
	var skipNextRecordWatchUpdate = false;
	$scope.typing = [];

	if (!$scope.data.hasReadableJournalField && !$scope.data.isNewRecord)
		console.warn("No readable journal field (comments, work notes, etc.) available in the stream for this record");

	if ($scope.page && $scope.page.g_form)
		hideParentJournalFields();

	function hideParentJournalFields() {
		if (!$scope.data.stream)
			return;

		var fields = $scope.data.stream.journal_fields;
		var g_form = $scope.page.g_form;
		for (var f in fields)
			g_form.setDisplay(fields[f].name, false);
	}

	var liveProfiles = {};
	liveProfiles[$scope.user.sys_id] = {
		userID: $scope.user.sys_id,
		name: $scope.user.name,
		initials: $window.NOW.user_initials
	};

	if ($window.NOW.user_avatar) {
		liveProfiles[$scope.user.sys_id].userImage = $window.NOW.user_avatar;
	}

	$scope.getLiveProfileByUserId = function(userId) {
		return liveProfiles[userId];
	};

	$scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);
	$scope.data.action = "";

	$scope.$evalAsync(function() {
		$scope.attachmentHandler.setParams($scope.data.table, $scope.data.sys_id, 1024 * 1024 * $scope.data.maxAttachmentSize);
		$scope.attachmentHandler.getAttachmentList();
	});

	function setAttachments(attachments, action) {
		if ($scope.submitting == true)
			return;

		$scope.attachments = attachments;
		c.data.attachments = attachments;

		if (!action)
			return;

		if (action === "added") {
			$rootScope.$emit('record.updated', {table_name: $scope.data.table, sys_id: $scope.data.sys_id, source: 'attachamentAction'});
		}

		$scope.data.action = action;
		spUtil.update($scope);
	}

	$rootScope.$on('attachamentEvent', function(event,obj) {
		$scope.attachmentHandler.getAttachmentList();

	});

	//function used to delete the attachments
	//is being called on the 'sp_attachment' template
	$scope.confirmDeleteAttachment = function(attachment, $event) {
		$scope.attach = attachment;

		c.modalInstance = $uibModal.open({
			templateUrl: 'deleteAttachment',
			input: attachment,
			scope: $scope
		});
	};

	c.deleteAttachment = function() {
		$scope.attachmentHandler.deleteAttachment($scope.attach);
		c.server.update();
		c.closeModal();
	};

	function appendError(error) {
		$scope.errorMessages.push(error);
		spUtil.addErrorMessage(error.msg + error.fileName);
	}

	var recordWatcherTimer;
	$scope.$on('record.updated', function(name, data) {
		// Use record watcher update if:
		//	This record was updated AND This widget didn't trigger the update.
		if (data.table_name == $scope.data.table && data.sys_id == $scope.data.sys_id) {
			$timeout.cancel(recordWatcherTimer);
			recordWatcherTimer = $timeout(function() {
				if (skipNextRecordWatchUpdate)
					skipNextRecordWatchUpdate = false;
				else
					spUtil.update($scope).then(function(r) {
						$scope.data.stream = r.stream;
						$scope.attachmentHandler.getAttachmentList();
					});
			}, 250);
		}
	});

	$rootScope.$on('sp.sessions', function(evt, sessions) {
		$scope.typing = [];
		$scope.viewing = [];

		Object.keys(sessions).forEach(function(session) {
			session = sessions[session];

			if (session.status == 'typing') {
				$scope.typing.push(session);
			} else if (session.status == 'viewing') {
				$scope.viewing.push(session);
			} else {
				return;
			}
		});
	});

	//used for when the user is not viewing the record, but stays in the portal
	newInput.record_sysId = c.data.sys_id;

	$scope.$on('$destroy', function() {

		// if current member is not empty, it will make the user offline
		if (c.data.currentMember !== '') {
			var ga = new GlideAjax('CIRSituationUtilsClient');
			ga.setScope('x_fru_cir');
			ga.addParam('sysparm_name', 'changeSituationMemberState');
			ga.addParam('sysparm_situation_sys_id', c.data.sys_id + '');
			ga.execute();
		}
	});

	//used for when the user closes the browser or exit from portal
	//does not work in every browsers
	window.addEventListener("beforeunload", function(e) {
		newInput.offline = true;
		c.server.get(newInput);
	});

	//used for mobile, and for when the user changes tab on browser
	window.addEventListener("visibilitychange", function(e) {
		if (document.visibilityState == 'hidden') {
			newInput.offline = true;
			c.server.get(newInput);
		}
		if (document.visibilityState == 'visible') {
			newInput.offline = false;
			c.server.get(newInput);
		}
	});

	spUtil.recordWatch($scope, c.data.tables.SITUATION_MEMBER, 'situation=' + c.data.sys_id, function() {
		c.server.update();
	});

	spUtil.recordWatch($scope, c.data.tables.SITUATION, 'sys_id=' + c.data.sys_id, function(name, data) {
		c.server.update();
	});

	$scope.$on('sp.conversation_title.changed', function(evt, text) {
		$scope.data.ticketTitle = text;
	});

	$scope.$watch("data.canWrite", function() {
		$rootScope.$broadcast("sp.record.can_write", $scope.data.canWrite);
	});

	var streamUpdateTimer;
	$scope.$watch("data.stream", function() {
		$timeout.cancel(streamUpdateTimer);
		streamUpdateTimer = $timeout(function() {
			mergeStreamEntries();
		}, 50).then(function() {
			setUnreadState();
		});
	});

	function setUnreadState() {
		var obj = {};
		obj.action = c.data.action_update_last_message_time;
		obj.lastMessageTime = lastMessageTime;
		obj.lastMessageSender = lastMessageSender;
		c.server.get(obj).then(function(answer) {
			if(answer.data.unreadMessage && (lastMessageSender != c.data.userId)){
				document.getElementsByClassName("dot-red")[0].style.display = 'block';
			}
			$timeout(function() {
				if (c.data.memberIsOnline && currentTab == 'chat') {
					document.getElementsByClassName("dot-red")[0].style.display = 'none';

					// it needs to update the last access end time so it does not show the red dot
					c.server.get({action: 'updateLastAccessEndTime'});
				}
			}, 5000);
		});
	}

	function mergeStreamEntries() {
		var i;

		$scope.placeholder = $scope.data.placeholderNoEntries;
		if (!$scope.data.stream || !$scope.data.stream.entries)
			return;

		$scope.placeholder = $scope.data.placeholder;
		var entries = $scope.data.stream.entries;
		if (entries[0]) {
			lastMessageTime = entries[0].sys_created_on;
			lastMessageSender = entries[0].user_sys_id;
		}

		if (entries && !$scope.data.mergedEntries) {
			$scope.data.mergedEntries = $scope.data.stream.entries.slice();
			for (i = 0; i < entries.length; i++) {
				existingEntries[entries[i].sys_id] = true;
			}
			return;
		}

		var mergedEntries = $scope.data.mergedEntries;
		for (i = entries.length - 1; i >= 0; i--) {
			var curEntry = entries[i];
			if (isNewEntry(mergedEntries, curEntry)) {
				mergedEntries.unshift(curEntry);
				existingEntries[curEntry.sys_id] = true;
			}
		}
	}

	function isNewEntry(mergedEntries, item) {
		for (var i = 0; i < mergedEntries.length; i++) {
			if (mergedEntries[i].sys_id === item.sys_id) {
				return false;
			}
		}
		return true;
	}

	$scope.getPlaceholder = function() {
		if ($scope.data.use_dynamic_placeholder && $scope.data.useSecondaryJournalField)
			return $scope.data.secondaryJournalField.label;
		return $scope.placeholder;
	};

	var colorCache;
	$scope.getFieldColor = function(fieldName) {
		var defaultColor = "transparent";
		if (colorCache) {
			if (fieldName in colorCache)
				return colorCache[fieldName];
			else
				return defaultColor;
		}

		colorCache = {};
		var jf = $scope.data.stream.journal_fields;
		for (var i = 0; i < jf.length; i++) {
			colorCache[jf[i].name] = jf[i].color || defaultColor;
		}
		return $scope.getFieldColor(fieldName);
	};

	$scope.$on("attachment.upload.start", function() {
		$scope.msg = $scope.data.uploadingAttachmentMsg;
	});

	$scope.$on("attachment.upload.stop", function() {
		$scope.msg = "";
		//update the stream so we get the new attachment
		spUtil.update($scope).then(function(r) {
			$scope.data.stream = r.stream;
		});
	});

	$scope.data.isPosting = false;

	$scope.postEntry = function(input) {
		post(input);
	};

	function post(input) {
		if ($scope.data.isPosting)
			return;

		if (!input)
			return;

		input = input.trim();
		$scope.data.journalEntry = input;

		if ($scope.data.useSecondaryJournalField)
			$scope.data.journalEntryField = $scope.data.secondaryJournalField.name;
		else
			$scope.data.journalEntryField = $scope.data.primaryJournalField.name;
		$scope.data.isPosting = true;

		var obj = {
			action: "journal",
			journalEntry: $scope.data.journalEntry,
			journalEntryField : $scope.data.journalEntryField
		};
		c.server.get(obj).then(function() {
			spUtil.update($scope).then(function() {
				$scope.data.isPosting = false;
				reset();
				spAriaUtil.sendLiveMessage($scope.data.messagePostedMsg);
			});
		});
		skipNextRecordWatchUpdate = true;
		$scope.setFocus(); // sets focus back on input, defined in "link"
	}

	var reset = function() {
		$scope.userTyping("");
		$scope.data.journalEntry = "";
		$scope.updateFormWithJournalFields();
		$scope.data.useSecondaryJournalField = false;
		$scope.data.journalEntryField = "";
	};

	$scope.keyPress = function(event) {
		if ($scope.data.isPosting)
			return;

		if (event.keyCode === 13 && !event.shiftKey) {
			event.preventDefault();
			$timeout(function() {
				if ($scope.data.journalEntry)
					$scope.postEntry($scope.data.journalEntry);
			}, 250);
		}
	};

	$scope.userTyping = function(input) {
		var status = "viewing";
		if (input.length)
			status = "typing";

		$scope.$emit("record.typing", { status: status, value: input, table: $scope.data.table, sys_id: $scope.data.sys_id });
		$scope.updateFormWithJournalFields();
	};

	$scope.updateFormWithJournalFields = function() {
		var fieldName, fieldToClear = "";

		if ($scope.data.useSecondaryJournalField) {
			fieldName = $scope.data.secondaryJournalField.name;
			fieldToClear = $scope.data.primaryJournalField.name;
		} else {
			fieldName = $scope.data.primaryJournalField.name;
			fieldToClear = "";
		}

		$scope.$emit("activity_stream_is_changed", { "fieldName": fieldName, "fieldToClear": fieldToClear, "input": $scope.data.journalEntry });
	};

	$scope.openTab = function(evt, tabName) {
		var i, tabcontent, tablinks;

		// Get all elements with class="tabcontent" and hide them
		tabcontent = document.getElementsByClassName("tabcontent");
		for (i = 0; i < tabcontent.length; i++) {
			tabcontent[i].style.display = "none";
		}

		// Get all elements with class="tablinks" and remove the class "active"
		tablinks = document.getElementsByClassName("tablinks");
		for (i = 0; i < tablinks.length; i++) {
			tablinks[i].className = tablinks[i].className.replace(" active", "");
		}

		// Show the current tab, and add an "active" class to the button that opened the tab
		document.getElementById(tabName).style.display = "block";
		evt.currentTarget.className += " active";
		currentTab = tabName;

		if (currentTab == 'chat') {
			document.getElementsByClassName("dot-red")[0].style.display = 'none';
		}
	};

	// If the user can NOT attach files to the Facility Order
	// It will hide the icons to edit/delete if there's already attachments in the list
	if (!$scope.data.canWrite) {
		$scope.attachmentHandler.editAttachment = function() {
			// Do nothing
		};
		$scope.attachmentHandler.deleteAttachment = function() {
			// Do nothing
		};
		// Creates a element style in the document to hide the icons of the attachments
		var styleEl = document.createElement('style');
		document.head.appendChild(styleEl);
		var styleSheet = styleEl.sheet;
		styleSheet.insertRule(".tools .btn-group { display: none;}", 0);
	}


	c.closeModal = function() {
		c.modalInstance.close();
	};

	$scope.$on("field.change", function(evt, parms) {
		if (parms.field.name == 'user')
			c.data.user = parms.newValue.link.split('sys_user/')[1];

		c.server.get().then(function() {
			spUtil.update($scope);
		});
	});

	c.editMembers = function() {
		var crisis_record = c.data.sys_id;

		spModal.open({
			title: c.data.popupTitle,
			buttons: [{
				label: '${cir_sit_close}',
				cancel: true
			}],
			widget: 'cir-sit-edit-members',
			widgetInput: {
				sys_id: crisis_record
			}
		});
	};

}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-title {&#13;
  display: inline;&#13;
}&#13;
&#13;
@media only screen and (max-width: 600px) {&#13;
  .tablinks {&#13;
    font-size: 12px;&#13;
  }&#13;
  &#13;
  #addPeopleBtn {&#13;
    font-size: 12px;&#13;
  }&#13;
  &#13;
  #documentsTab {&#13;
  	display: none;&#13;
  }&#13;
}&#13;
&#13;
.panel-title-container {&#13;
  display: flex;&#13;
  justify-content: space-between;&#13;
  align-items: center;&#13;
}&#13;
&#13;
.panel-title-icons {&#13;
  ul {&#13;
    display: flex;&#13;
    align-items: center;&#13;
    padding: 0;&#13;
    margin: 0;&#13;
  }&#13;
  li {&#13;
    padding: 0;&#13;
    margin: 0;&#13;
&#13;
    .panel-button {&#13;
      display: flex;&#13;
      align-items: center;&#13;
      margin: 0 0 0 15px;&#13;
      line-height: initial;&#13;
&#13;
      &amp;:hover, &amp;:focus {&#13;
        text-decoration: none;&#13;
      }&#13;
    }&#13;
  }&#13;
}&#13;
&#13;
.action-btn {&#13;
  color: #2e2e2e;&#13;
  display: block;&#13;
  border-radius: 3px;&#13;
  border: solid 1px #cccccc;&#13;
  background-color: #ffffff;&#13;
}&#13;
&#13;
&#13;
.timeline-heading test {&#13;
  float:right;&#13;
}&#13;
&#13;
.timeline-body &gt; p {&#13;
  white-space: pre-wrap;&#13;
}&#13;
&#13;
.timeline-body ul &gt; li {&#13;
  float: none;&#13;
}&#13;
&#13;
.no-resize {&#13;
  resize: none;&#13;
}&#13;
&#13;
.journal-field-indicator {&#13;
  width: 5px;&#13;
  position: absolute;&#13;
  left: 5px;&#13;
  top: 5px;&#13;
  bottom: 5px;&#13;
  z-index: 3;&#13;
}&#13;
&#13;
.panel-heading {&#13;
  word-wrap: break-word;&#13;
}&#13;
&#13;
.panel-body {&#13;
  height: 590px; &#13;
}&#13;
&#13;
ul {&#13;
  list-style: none;&#13;
}&#13;
&#13;
.overflow-hidden {&#13;
  overflow: hidden;&#13;
}&#13;
&#13;
&#13;
.timeline-badge-wrap {&#13;
  margin: auto;&#13;
  max-width: 115px;&#13;
}&#13;
&#13;
.timeline-badge.success {&#13;
  background-color: $success;&#13;
}&#13;
&#13;
.timeline-badge {&#13;
  position: relative;&#13;
  left:25%;&#13;
  width:50%;&#13;
  padding-bottom:50%;&#13;
  border-radius:50%;&#13;
}&#13;
&#13;
.timeline-badge span{&#13;
  position:absolute;&#13;
  top:50%;&#13;
  left: 50%;&#13;
  transform: translate(-50%, -50%);&#13;
  font-size:13px;&#13;
  color: #fff;&#13;
}&#13;
&#13;
.journal-type {&#13;
  display: inline-flex;&#13;
  display: -ms-inline-flexbox;&#13;
  flex-wrap: wrap;&#13;
  -webkit-justify-content: flex-end;&#13;
}&#13;
&#13;
.fa-circle {&#13;
  font-size: 4px;&#13;
  padding: 7px;&#13;
}&#13;
&#13;
@media (max-width: 768px) {&#13;
  .timeline-badge-wrap {&#13;
    margin: 0;&#13;
  }&#13;
  .timeline-badge {&#13;
    left: 10%;&#13;
  }&#13;
}&#13;
&#13;
.tooltiptext {&#13;
  visibility: hidden;&#13;
  width: 120px;&#13;
  background-color: black;&#13;
  color: #fff;&#13;
  text-align: center;&#13;
  border-radius: 6px;&#13;
  padding: 5px 0;&#13;
&#13;
  /* Position the tooltip */&#13;
  position: absolute;&#13;
  z-index: 1;&#13;
}&#13;
&#13;
.tab {&#13;
	padding: 0px;&#13;
}&#13;
&#13;
.tab button:hover {&#13;
  color: #ec0000;&#13;
}&#13;
&#13;
.tab button.active {&#13;
  color: #ec0000;&#13;
  border-bottom: 3px solid #ec0000;&#13;
}&#13;
&#13;
.tab button {&#13;
  background-color: inherit;&#13;
  float: left;&#13;
  border: none;&#13;
  outline: none;&#13;
  cursor: pointer;&#13;
  padding: 16px 16px;&#13;
  transition: 0.3s;&#13;
}&#13;
&#13;
.tabcontent {&#13;
  display: none;&#13;
  height: 100%;&#13;
  border-top: none;&#13;
}&#13;
&#13;
.circle-green {&#13;
  width: 12px;&#13;
  height: 12px;&#13;
  border: solid 1px #48c891;&#13;
  border-radius: 50px;&#13;
  background-color: #48c891;&#13;
}&#13;
&#13;
.circle-yellow {&#13;
  width: 12px;&#13;
  height: 12px;&#13;
  border: solid 1px #dfd139;&#13;
  border-radius: 50px;&#13;
  background-color: #d4c636;&#13;
}&#13;
&#13;
.circle-white {&#13;
  width: 12px;&#13;
  height: 12px;&#13;
  border: solid 2px #c6c6c6;&#13;
  border-radius: 50px;&#13;
  background-color: #ffffff;&#13;
}&#13;
&#13;
.dot-red{&#13;
  width: 6px;&#13;
  height: 6px;&#13;
  border-radius: 6px;&#13;
  background-color:  #ec0000;&#13;
  float: right;&#13;
  margin-left:3px;&#13;
}&#13;
&#13;
tr {&#13;
  border-bottom: solid 1px #dee5e7;&#13;
}&#13;
&#13;
td {&#13;
  height: 56px;&#13;
}&#13;
&#13;
tr:last-child {&#13;
  border-collapse: collapse;&#13;
}&#13;
&#13;
tr:nth-child(even) {&#13;
  background-color: #f9f9f9;&#13;
}&#13;
</css>
        <data_table>sp_instance</data_table>
        <demo_data>{"options": {
	"sys_id": -1,
		"table": "incident"
	}
}</demo_data>
        <description>Shows chat, members and documents attached to a Situation</description>
        <docs/>
        <field_list/>
        <has_preview>true</has_preview>
        <id>cir-situation-conversations</id>
        <internal>false</internal>
        <link><![CDATA[function(scope, elm) {
	// Set the focus back on the input for IE11
	scope.setFocus = function() {
		var input = $(elm[0]).find('textarea#post-input');
		if (input[0])
			input[0].focus();
	}
}]]></link>
        <name>CIR Situation Conversations with tabs</name>
        <option_schema>[{"hint":"Placeholder text shows selected journal field","name":"use_dynamic_placeholder","section":"Behavior","label":"Use dynamic placeholder","type":"boolean"},{"hint":"Message to show when record has no readable journal field","name":"no_readable_journal_field_message","default_value":"","section":"Presentation","label":"No readable journal field message","type":"string"}]</option_schema>
        <public>false</public>
        <roles>x_fru_cir.situation_user</roles>
        <script><![CDATA[(function() {
	var utils = new CIRSituationUtils();
	data.tables = CIRConstants.Tables;
	data.sys_id =  $sp.getParameter("sys_id");
	data.table =  $sp.getParameter("table");
	data.popupTitle = gs.getMessage('Edit members');
	data.action_new_message = 'new_message';
	data.action_update_last_message_time = 'update_last_message_time';
	data.userId = gs.getUserID();
	data.currentMember = getCurrentMember(data.userId, data.sys_id);
	data.lastReadMessageTime = data.currentMember ? data.currentMember.last_access_end_time : '';
	data.memberIsOnline = data.currentMember ? data.currentMember.online : 0;
	data.unreadMessage = false;

	if (data.currentMember && data.currentMember.isValidRecord()) {
		// if it is valid and the member is offine, it will set it to online
		if (!input || !data.currentMember.last_access_time) {
			changeUserState(true);
		}

		// will set the state to offline only if the user is online
		else if (input && input.offline == true && data.memberIsOnline) {
			//data.currentMember.last_access_end_time = new GlideDateTime();
			changeUserState(false);
		} else if (input && input.offline == false && !data.memberIsOnline) {
			changeUserState(true);
		}

		// updates the lastAccessEndTime so we can compared with the last read message
		if (input && input.action == 'updateLastAccessEndTime') {
			updateLastAccessEndTime();
		}
	}

	if(input && input.action && input.action === data.action_update_last_message_time) {
		data.unreadMessage = checkIfUnread(input.lastMessageTime, data.lastReadMessageTime);
	}

	data.membersAccessed = utils.GetOnlineMembers(data.sys_id);

	data.members = utils.GetMembers(data.sys_id);

	data.no_members = gs.getMessage('cir_sit_no_members');
	data.no_attachments = gs.getMessage('cir_sit_no_attachments');
	data.attachments = input ? input.attachments : false;
	data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));

	if (isNaN(data.maxAttachmentSize))
		data.maxAttachmentSize = 24;

	data.uploadingAttachmentMsg = gs.getMessage("cir_sit_uploading_attach");
	data.sharingLocMsg = gs.getMessage("Sharing location...");
	data.messagePostedMsg = gs.getMessage("cir_sit_message_sent");
	data.viewMsg = gs.getMessage("View");
	data.attachAddedMsg = gs.getMessage("cir_sit_attachment_added");
	data.attachFailMsg = gs.getMessage("cir_sit_failed_add_attach");

	// don't use options.title unless sys_id and table also come from options
	if (options && options.sys_id && options.table)
		data.ticketTitle = options.title;

	data.placeholder = options.placeholder || gs.getMessage("cir_sit_type_message_here");
	data.placeholderNoEntries = options.placeholderNoEntries || gs.getMessage("cir_sit_type_message_here");
	data.btnLabel = options.btnLabel || gs.getMessage("Send");
	data.includeExtended = options.includeExtended || false;
	data.use_dynamic_placeholder = options.use_dynamic_placeholder;

	var gr = new GlideRecordSecure(data.table);
	if (!gr.isValid())
		return;
	if (gr.get(data.sys_id)){
		if (!gr.canRead())
			return;


		data.table = gr.getRecordClassName(); // use actual table for the record
		options.no_readable_journal_field_message = options.no_readable_journal_field_message || gs.getMessage('cir_sit_no_reable_comment');
		data.number = gr.getDisplayValue('number');
		data.created_on = gr.getValue('sys_created_on');
	}

	if (input) { // if we have input then we're saving
		if (input.action && input.action == 'journal' && input.journalEntry && input.journalEntryField && gr.canWrite(input.journalEntryField)){
			if (gr.canWrite(input.journalEntryField)){
				gr[input.journalEntryField] = input.journalEntry;
				gr.update();
				$sp.logStat('Comments', data.table, data.sys_id, input.journalEntry);
			}
		}
		data.ticketTitle = input.ticketTitle;
		data.placeholder = input.placeholder;
		data.btnLabel = input.btnLabel;
		data.includeExtended = input.includeExtended;

	} else {
		if (!data.ticketTitle) {
			if (gr.short_description.canRead())
				data.ticketTitle = gr.getDisplayValue("short_description");
			if (!data.ticketTitle)
				data.ticketTitle = data.number;
		}

		$sp.logStat('Task View', data.table, data.sys_id);
	}

	var grMembers = new GlideRecordSecure(data.tables.SITUATION_MEMBER);
	data.canCreateMembers = grMembers.canCreate();
	data.canWrite = gr.canWrite();
	data.canWriteComments = gr.comments.canWrite();
	data.canAttach = gs.hasRole(gs.getProperty("glide.attachment.role"));
	data.canRead = gr.canRead();
	data.hasWritableJournalField = true;
	data.hasReadableJournalField = true;

	if (data.canRead && !data.isNewRecord) {
		data.stream = $sp.getStream(data.table, data.sys_id);
		// Journal fields come in correct order already
		// so grab the first 2 writeable fields
		if ('journal_fields' in data.stream) {
			var jf = data.stream.journal_fields;

			for(var i=0; i < jf.length; i++){
				if (jf[i].can_read === true)
					data.hasReadableJournalField = true;

				if (jf[i].can_write === true){
					data.hasWritableJournalField = true;

					if (!data.primaryJournalField)
						data.primaryJournalField = jf[i];
					else if (data.includeExtended && !data.secondaryJournalField)
						data.secondaryJournalField = jf[i];
					else
						break;
				}
			}
		}
	}

	data.tableLabel = gr.getLabel();
	
	function changeUserState(state) {
		data.currentMember.online = state;
		data.currentMember.last_access_end_time = new GlideDateTime();
		if (state) {
			data.currentMember.last_access_time = new GlideDateTime();
		}
		data.currentMember.update();
	}

	function updateLastAccessEndTime() {
		data.currentMember.last_access_end_time = new GlideDateTime();
		data.currentMember.update();
	}

	function checkIfUnread (messageDate, lastReadMessage) {
		var gdtMessageDate = new GlideDateTime(messageDate);
		var gdtlastReadMessage = new GlideDateTime(lastReadMessage);
		return gdtMessageDate.after(gdtlastReadMessage);
	}


	function filterMembersOut() {
		var array = [];
		var idArrays = data.members.map(function(e) {
			return e.id;
		});
		return idArrays;
	}

	function getCurrentMember(userId, crisisId) {
		var grCMember = new GlideRecord(data.tables.SITUATION_MEMBER);
		grCMember.addQuery('user_id', userId);
		grCMember.addQuery('situation', crisisId);
		grCMember.query();
		if (grCMember.next()) {
			return grCMember;
		}
		return '';
	}

})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>paulo.gomes</sys_created_by>
        <sys_created_on>2020-03-26 08:56:03</sys_created_on>
        <sys_id>01ab4f1d1b3f4850df7e43f4bd4bcbd4</sys_id>
        <sys_mod_count>175</sys_mod_count>
        <sys_name>CIR Situation Conversations with tabs</sys_name>
        <sys_package display_value="Corporate Incident Response" source="x_fru_cir">265c101f13ab44100b8670a76144b0a2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Corporate Incident Response">265c101f13ab44100b8670a76144b0a2</sys_scope>
        <sys_update_name>sp_widget_01ab4f1d1b3f4850df7e43f4bd4bcbd4</sys_update_name>
        <sys_updated_by>Paulo.Gomes@fruitionpartners.pt</sys_updated_by>
        <sys_updated_on>2020-08-10 09:40:20</sys_updated_on>
        <template><![CDATA[<body> 
<div>
  <div ng-if="!data.canRead && !data.isNewRecord">
    ${cir_sit_no_records}
  </div>
  <div ng-if="data.canRead && !data.isNewRecord" class="panel panel-{{options.color}} b ticket_conversation" style="height:650px">
    <div class="panel-heading" style="padding:0px 10px 0px 10px">
      <div class="h2 panel-title panel-title-container">
        <div class="tab">
          <button class="tablinks active" ng-click="openTab($event, 'chat')">${cir_sit_chat}
          	 <div class="dot-red" style="display:none"></div> 
          </button>
          <button class="tablinks" ng-click="openTab($event, 'members')">${cit_sit_members} ({{data.membersAccessed}}/{{data.members.length}})</button>
          <button class="tablinks" ng-click="openTab($event, 'documents')" id="documentsTab">${cir_sit_documents}</button>
        </div>

        <div class="pull-right panel-title-icons">
          <ul>
            <li>
              <button ng-disabled="!c.data.canCreateMembers" ng-click="c.editMembers()" id="addMembersBtn" class="btn btn-primary action-btn pull-right">${cir_sit_edit_members}</button>
            </li>
            <li><sp-attachment-button ng-if="data.canWrite && data.canAttach"></sp-attachment-button></li>
          </ul>
        </div>
      </div>
    </div>

    <div id="chat" class="tabcontent" style="display:block">
      <div class="panel-body"  style="overflow-y: auto;">
        <div ng-if="data.hasReadableJournalField">
          <form ng-submit="postEntry(data.journalEntry)" id="sand">
            <div ng-show="data.hasWritableJournalField" class="input-group">
              <textarea ng-keypress="keyPress($event)"
                        sn-resize-height="trim"
                        ng-disabled="!c.data.canWriteComments"
                        rows="1" id="post-input"
                        class="form-control no-resize overflow-hidden"
                        ng-model='data.journalEntry'
                        ng-model-options='{debounce: 250}'
                        ng-attr-placeholder="{{getPlaceholder()}}"
                        aria-label="{{getPlaceholder()}}"
                        autocomplete="off"
                        ng-change="userTyping(data.journalEntry)"/>
              <span class="journal-field-indicator" ng-style="({'background-color': data.useSecondaryJournalField ? data.secondaryJournalField.color : data.primaryJournalField.color})"></span>
              <span class="input-group-btn" style="vertical-align: top">
                <input type="submit" class="btn btn-primary" value="{{data.btnLabel}}" ng-disabled="!c.data.canWriteComments"/>
              </span>
            </div>
            <div ng-if="::(data.secondaryJournalField && data.secondaryJournalField.can_write)">
              <label class="pull-right">
                <input type="checkbox" ng-model="::data.useSecondaryJournalField" ng-change="updateFormWithJournalFields()"/>
                <span> {{::data.secondaryJournalField.label}}</span>
              </label>
            </div>
          </form>
          <ul class="list-group m-b-none" ng-if="typing.length > 0">
            <li class="list-group-item user-typing m-t" ng-repeat="u in typing">${{{::u.user_display_name}} ...}</li>
          </ul>
          <ul class="list-group m-b-none m-t" ng-if="msg">
            <li class="list-group-item user-typing">{{msg}}</li>
          </ul>
          <div class="timeline-container">
            <ul role="list" class="timeline" aria-label="${Ticket history}">
              <li class="timeline-item" ng-class="::{'timeline-inverted': e.user_sys_id == data.stream.user_sys_id} " ng-repeat="e in data.mergedEntries">
                <div class="timeline-badge">
                  <sn-avatar-once
                                  ng-if="hasLiveProfile(e.user_sys_id)"
                                  primary="getLiveProfileByUserId(e.user_sys_id)"
                                  class="avatar-large"
                                  show-presence="false"
                                  enable-context-menu="false">
                  </sn-avatar-once>
                </div>
                <div class="timeline-panel">
                  <div class="timeline-panel-inner" ng-style="::{'border-color': getFieldColor(e.element)}">
                    <div class="timeline-heading">
                      <div class="timeline-title h4">{{::e.name}}</div>
                      <p class = "time-text">
                        <small class="text-muted" >
                          <span class="glyphicon glyphicon-time" aria-hidden="true" tabindex="-1" />
                          <sn-time-ago  timestamp="::e.sys_created_on"  /> 
                        </small>
                        <i ng-if="::e.field_label" class="fa fa-circle text-muted" aria-hidden="true"></i>
                        <small class = "text-muted journal-type">{{::e.field_label}}</small>
                      </p>
                    </div>
                    <div class="timeline-body">
                      <p ng-if="::(e.element != 'attachment')" ng-bind-html="::e.value"></p>
                      <div ng-if="::(e.element == 'attachment')">
                        <a target="_blank" href="/sys_attachment.do?view=true&sys_id={{::e.attachment.sys_id}}" title="{{::dataViewMsg}}" >
                          <img ng-if="e.attachment.thumbnail_path" alt="" ng-src="/{{::e.attachment.path}}?t=medium" class="img-responsive"/>
                        </a>
                        <div>
                          <a href="/sys_attachment.do?sys_id={{::e.attachment.sys_id}}" target="_blank" title="{{::dataViewMsg}}"><strong>{{::e.attachment.file_name}}</strong></a><br/>
                          {{::e.attachment.size}}
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              </li>
              <li role="listitem" class="timeline-item timeline-inverted" aria-label="{{data.stream.user_full_name}}">
                <div class="timeline-badge">
                  <sn-avatar-once
                                  ng-if="hasLiveProfile(data.stream.user_sys_id)"
                                  primary="getLiveProfileByUserId(data.stream.user_sys_id)"
                                  class="avatar-large"
                                  show-presence="false"
                                  enable-context-menu="false">
                  </sn-avatar-once>
                </div>
                <div class="timeline-panel timeline-panel-first-item">
                  <div class="timeline-heading">
                    <div class="timeline-title h4">{{data.stream.user_full_name}}</div>
                    <p>
                      <small class="text-muted">
                        <span class="glyphicon glyphicon-time" aria-hidden="true" tabindex="-1" />
                        <sn-time-ago timestamp="data.created_on" />
                      </small>
                    </p>
                  </div>
                  <div class="timeline-body">
                    <p>{{data.number}} ${cir_sit_created}</p>
                  </div>
                </div>
              </li>
              <li role="presentation" aria-hidden="true">
                <div class="timeline-badge-wrap">
                  <div class="timeline-badge success">
                    <span>${cir_sit_start}</span>
                  </div>
                </div>            	              
              </li>            
            </ul>
          </div>

        </div>
        <div ng-if="!data.hasReadableJournalField">
          {{options.no_readable_journal_field_message}}
        </div>
      </div>
    </div>

    <div id="members" class="tabcontent">
      <div class="panel-body" style="max-height:700px; overflow-y: auto; padding:0px">
        <div style="margin:20px" ng-if="data.members.length == 0">
          <span style="font-weight: 500;"> {{ data.no_members }}</span>
        </div> 

        <table style="width:100%">
          <tr ng-repeat="member in data.members" style="height:30px">
            <td style="width:10%" align="center">
              <div class="circle-green" ng-if="member.online == true"></div>
              <div class="circle-yellow" ng-if="member.online == false && member.last_access"></div>
              <div class="circle-white" ng-if="member.online == false && !member.last_access"></div>
            </td>
            <td style="width:60%">
              {{ member.name }}
            </td>
            <td style="width:30%">
              {{ member.last_access }}
            </td>
          </tr>
        </table>
      </div>
    </div>

    <div id="documents" class="tabcontent" ng-if="!data.on_mobile" ng-disabled="!c.data.canWrite">
      <div class="panel-body" style="max-height:700px; overflow-y: auto;">
        <div ng-if="c.data.attachments.length == 0">
          <span style="font-weight: 500;">{{ data.no_attachments }}</span>
        </div> 
        <now-attachments-list template="sp_attachment"/>
      </div>
    </div>

  </div>
</div>
  
 <script type="text/ng-template" id="deleteAttachment">
	<div class="panel panel-default">
		<div class="panel-heading">
			<h4 class="panel-title">${cir_sit_attachment_delete_confirmation}</h4>
  		</div>
		<div class="panel-body wrapper-xl">
			<h4>${cir_sit_attachment_delete_confirmation_message}</h4>
  		</div>
		<div class="panel-footer text-right">
    		<button class="btn btn-default" ng-click="c.closeModal()">${cir_sit_cancel}</button>
			<button class="btn btn-primary" ng-click="c.deleteAttachment()">${cir_sit_ok}</button>
		</div>
	</div>
</script>
</body>]]></template>
    </sp_widget>
</record_update>
