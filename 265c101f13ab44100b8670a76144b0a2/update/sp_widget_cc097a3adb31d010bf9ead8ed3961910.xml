<?xml version="1.0" encoding="UTF-8"?><record_update table="sp_widget">
    <sp_widget action="INSERT_OR_UPDATE">
        <category>custom</category>
        <client_script><![CDATA[function ($scope, $http, spScUtil, spUtil, nowAttachmentHandler, $rootScope, $sanitize, $window, $sce, i18n, $timeout, $log, spAriaUtil, $document, spModal, $q, spAtf, $location, spAriaFocusManager, spSCNavStateManager) {
    var c = this;
	
    if (c.data.sc_cat_item && $scope.data.hasOwnProperty("_generatedItemGUID")) {
        c.data.sc_cat_item._attachmentGUID = $scope.data._generatedItemGUID;
    }
	$scope.variableSet = c.data.sc_cat_item.variable_sets;
	
	//Pass default collapse / expand to $scope for Link Funcion
	var showByDefault = true;
	
	if(c.data.sc_cat_item.u_expand_variable_sets == '0'){
		showByDefault = false;
	} 
	$scope.showAllVariableSets = showByDefault;
	
	//do the same for expanding first section
	var expandFirst = true;
	if(c.data.sc_cat_item.u_expand_first_section == '0') {
		expandFirst = false;
	}
	$scope.showFirstVariableSet = expandFirst;
	

    c.quantity = c.data.quantity ? c.data.quantity + "" : "1";
    c.mandatory = [];
    $scope.stickyHeaderTop = '0px';
    c.widget._debugContextMenu = [
        [i18n.getMessage("Open") + " sc_cat_item", function () {
            var item = c.data.sc_cat_item;
            $window.open("/sp_config?id=form&table=" + item.table + "&sys_id=" + item.sys_id);
        }]
    ];

    $rootScope.$on('spModel.gForm.rendered', function () {
        $timeout(function () {
            spAtf.init().then(function (atf) {
                $scope._atf = atf;
                atf.expose('catalog_util', catalogUtil);
            });
        }, 10);
    });

    //	ATF helper object
    var catalogUtil = {
        updateGform: function () {
            $scope._atf.expose('g_form', spAtf.augmentForm(g_form));
        },
			

        addRow: function (fieldId, timeoutInMS) {
            if (timeoutInMS <= 0)
                timeoutInMS = 1000;
            var deferred = $q.defer();
            $scope.$broadcast("$sp.sc_multi_row.create_row", fieldId, $scope.data.sc_cat_item.sys_id);
            $scope.$on('spModel.gForm.initialized', function (e, gFormInstance) {
                if (gFormInstance.getSysId() == fieldId)
                    deferred.resolve();
            });
            $timeout(function () {
                deferred.reject();
            }, timeoutInMS);
            return deferred.promise;
        },

        submit: function (timeout) {
            var deferred = $q.defer();
            $scope.triggerOnSubmit(timeout);
            var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function () {
                cleanup();
                deferred.reject("Can't submit form");
            });
            if (g_form) {
                g_form.$private.events.on('submitted', function () {
                    var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function (o, result) {
                        $timeout(function () {
                            cleanUp();
                            deferred.resolve(result);
                        }, 10);
                    });
                });
            } else
                deferred.reject('g_form not initialized');

            return deferred.promise;
        },

        addToCart: function (timeout) {
            var defer = $q.defer();
            $scope.triggerAddToCart(timeout);
            var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function () {
                cleanup();
                defer.reject("Can't submit form");
            });
            if (g_form) {
                g_form.$private.events.on('submitted', function () {
                    var cleanup = $scope.$on('$sp.sc_cat_item.add_to_cart', function (o, result) {
                        $timeout(function () {
                            cleanup();
                            defer.resolve(result);
                        }, 10);
                    });
                });
            } else
                defer.reject('g_form not initialized');
            return defer.promise;
        },

        submitCatItem: function (timeout) {
            var defer = $q.defer();
            $scope.triggerOnSubmit(timeout);
            var cleanup = $scope.$on('$sp.service_catalog.form_submit_failed', function () {
                cleanup();
                defer.reject("Can't submit form");
            });
            if (g_form) {
                g_form.$private.events.on('submitted', function () {
                    if ($scope.data.sys_properties.twostep && $scope.data.sc_cat_item.request_method != "submit") {
                        defer.resolve();
                    } else {
                        var cleanUp = $scope.$on('$sp.sc_cat_item.submitted', function (o, result) {
                            $timeout(function () {
                                cleanUp();
                                result.single_step = true;
                                defer.resolve(result);
                            }, 10);
                        });
                    }
                });
            } else
                defer.reject('g_form not initialized');
            return defer.promise;
        },

        setQuantity: function (quantity) {
            if ($scope.c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" && $scope.c.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {
                $scope.c.quantity = quantity;
                $scope.$apply();
            }
        },

        getQuantity: function () {
            return $scope.c.quantity;
        },

        getPrice: function () {
            var obj = {};
            obj.price = $scope.data.sc_cat_item.price_display;
            obj.recurring_price = $scope.data.sc_cat_item.recurring_price_display;
            obj.recurring_frequency = $scope.data.sc_cat_item.recurring_frequency;
            return obj;
        }
    }

    c.showAddCartBtn = function () {
        return !$scope.submitted &&
            c.options.show_add_cart_button &&
            c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
            c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &&
            !c.data.sc_cat_item.no_cart && !c.data.is_cart_item;
    }

    c.showQuantitySelector = function () {
        // Following if block is code for hard-setting an aria-label on the quantity select box
        // for displaying the label "quantity"
        if ($('#catItemQuantity') != null) {
            var quantityElement = $('#catItemQuantity');
            quantityElement.prev().find(".select2-offscreen").removeAttr("aria-labelledby").attr("aria-label", "Quantity " + c.quantity);
        }

        return c.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
            c.data.sc_cat_item.sys_class_name !== "std_change_record_producer" &&
            !c.data.sc_cat_item.no_quantity &&
            (c.data.sc_cat_item.cart_guide === undefined || c.data.sc_cat_item.cart_guide === null) &&
            (!c.data.sc_cat_item.no_order_now || !c.data.sc_cat_item.no_cart);
    }
    c.showOrderNowButton = function () {
        return !$scope.data.is_cart_item && (c.data.sc_cat_item.use_sc_layout || !c.data.sc_cat_item.no_order_now);
    }
	c.showSubmitAndStay = function () {
		return c.showOrderNowButton() && c.data.tableName === 'x_fru_cir_internal_physical_security_incident';
	}
	
    c.showAddToWishlist = function () {
        return !$scope.submitted &&
            (c.data.showWishlist &&
                !c.data.sc_cat_item.no_wishlist &&
                !c.data.is_cart_item &&
                c.options.show_add_to_wishlist_button === 'true');
    }
    c.allowOrder = function () {
        if (c.data.sc_cat_item.use_sc_layout)
            return true;
        if (c.data.sc_cat_item.no_order)
            return false;
        if (c.data.sc_cat_item.no_order_now && c.data.sc_cat_item.no_cart)
            return false;
        return true;
    }

    c.hideCartMsg = function () {
        $scope.data.showMsg = false;
    }

    c.showAttachments = function () {
        return !$scope.submitted &&
            !c.data.sc_cat_item.no_attachments &&
            c.data.sc_cat_item.sys_class_name !== "std_change_record_producer";
    };
    $scope.$on('dialog.upload_too_large.show', function (e) {
        $log.error($scope.m.largeAttachmentMsg);
        spUtil.addErrorMessage($scope.m.largeAttachmentMsg);
    });
    $scope.m = $scope.data.msgs;
    var ah = $scope.attachmentHandler = new nowAttachmentHandler(setAttachments, appendError);

    function appendError(error) {
        spUtil.addErrorMessage(error.msg + error.fileName);
    }

    ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);

    function setAttachments(attachments, action) {
        $scope.attachments = attachments;
        if (action === "added") {
            $scope.setFocusToAttachment();
            if ($scope.attachments.length > 0)
                $scope.data.sc_cat_item.attachment_submitted = true;
        }
        if (action === "renamed")
            spAriaUtil.sendLiveMessage($scope.m.renameSuccessMsg);
        if (action === "deleted") {
            spAriaUtil.sendLiveMessage($scope.m.deleteSuccessMsg);
            if ($scope.attachments.length == 0)
                $scope.data.sc_cat_item.attachment_submitted = false;
        }
        spUtil.get($scope, {action: "from_attachment"});
    }

    $scope.attachmentHandler.getAttachmentList();
    $scope.confirmDeleteAttachment = function (attachment) {
        spModal.confirm($scope.data.msgs.delete_attachment).then(function () {
            $scope.attachmentHandler.deleteAttachment(attachment);
            $scope.setFocusToAttachmentButton();
        });
    }
    $scope.dismissWishListMessage = function () {
        $scope.is_update_wishlist = false;
    }

    if ($scope.data.sc_cat_item) {
        $scope.data.sc_cat_item.description = $sce.trustAsHtml($scope.data.sc_cat_item.description);
        if (angular.equals($scope.data.sc_cat_item._fields, {}))
            $scope.data.no_fields = true;
        if ($scope.data.sc_cat_item.sys_class_name !== "sc_cat_item_producer" &&
            $scope.data.sc_cat_item.sys_class_name !== "std_change_record_producer") {
            if ($scope.data.sc_cat_item.request_method == "request")
                $scope.submitButtonMsg = $scope.m.requestMsg;
            else if ($scope.data.sc_cat_item.request_method == "submit")
                $scope.submitButtonMsg = $scope.m.submitMsg;
            else
                $scope.submitButtonMsg = $scope.m.orderNowMsg;
        } else
            $scope.submitButtonMsg = $scope.m.submitMsg;
						$scope.saveAsDraftButtonMsg = $scope.m.submitAsDraft;
		$scope.submitAndCopyButtonMsg = $scope.m.sumbitAndCopyMsg;
        // Breadcrumbs
        if (!$scope.data.categories)
            $scope.data.categories = [];
        $scope.data.categories.forEach(function (category, index, categories) {
            categories[index].url = category.url + '&catalog_id=' + $scope.data.catalog_id;
        });
        if ($scope.data.is_wishlist_item) {
            $scope.data.categories.unshift({label: $scope.m.wishlistMsg, url: '?id=sc_wishlist'});
            $scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
        } else if ($scope.data.is_cart_item) {
            $scope.data.categories.unshift({label: $scope.m.cartMsg, url: '?id=sc_cart'});
            $scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
        } else if ($scope.data.categories.length > 0) {
            $scope.data.categories.unshift({
                label: $scope.data.sc_catalog || $scope.page.title,
                url: '?id=' + $scope.data.sc_category_page + "&catalog_id=" + $scope.data.catalog_id
            });
            $scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
            if ($scope.data.all_catalog_msg) {
                $scope.data.categories.unshift({
                    label: $scope.data.all_catalog_msg,
                    url: '?id=' + $scope.data.sc_category_page + "&catalog_id=-1"
                });
            }
        } else {
            $scope.data.categories.push({label: $scope.data.sc_cat_item.name, url: '#'});
        }

        $timeout(function () {
            $scope.$emit('sp.update.breadcrumbs', $scope.data.categories);
        });
        spUtil.setSearchPage('sc');
    } else {
        var notFoundBC = [{label: $scope.page.title, url: '?id=' + $scope.data.sc_catalog_page}];
        $timeout(function () {
            $scope.$emit('sp.update.breadcrumbs', notFoundBC);
        });
        spUtil.setSearchPage('sc');
    }
    ;
    c.getItemId = function () {
        return $scope.data.sc_cat_item ? $scope.data.sc_cat_item.sys_id : -1;
    };
    var g_form;
    $scope.$on('spModel.gForm.initialized', function (e, gFormInstance) {
        if (gFormInstance.getSysId() != -1 && gFormInstance.getSysId() != c.getItemId())
            return;
        g_form = gFormInstance;
				g_form.setValue('category', c.data.category_id);
				g_form.setReadOnly('category', true);
        spSCNavStateManager.register(g_form);
        $timeout(function () {
            $rootScope.$emit('spModel.gForm.rendered', g_form);
        }, 175);

        // This runs after all onSubmit scripts have executed
        g_form.$private.events.on('submitted', function () {
            cleanFailedSubmit();
            $scope.submitting = true;
            if ($scope.data.sc_cat_item.item_action === "order")
                getOne();
            else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
                addToCart();
            else if ($scope.data.sc_cat_item.item_action == "update_cart")
                updateCart();
        });
    });

    function getVarData(fields) {
        var reqData = {};
        for (var obj in fields)
            reqData[fields[obj].name] = fields[obj].value;
        return reqData;
    }

    function addLink(url, msg) {
        return "<a class='link' href=" + url + ">" + msg + "</a>";
    }

    $scope.$on("$sp.service_catalog.wishlist.update", function (evt, item) {
        if (item === $scope.data.sys_id)
            $scope.data.show_wishlist_msg = false;
    });
    $scope.addToWishlist = function () {
        var invalid = false;
        Object.keys($scope.data.sc_cat_item._fields).forEach(function (f) {
            if ($scope.data.sc_cat_item._fields[f].isRegexInvalid && $scope.data.sc_cat_item._fields[f].isInvalid)
                invalid = true;
        })
        if (invalid) {
            spUtil.addErrorMessage($scope.m.regexError);
            return;
        }
        $scope.submitting = true;
        $scope.m.actionMsg = $scope.data.is_wishlist_item ? $scope.m.wishlistUpdateMsg : $scope.m.wishlistAddMsg;
        $scope.m.actionMsg += addLink('?id=sc_wishlist', $scope.m.viewWishListMsg);
        $scope.m.actionMsg += '<i class="fa fa-close pull-right pointer close-notification" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/>';
        $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
        $scope.is_update_wishlist = false;
        spScUtil.addToWishlist($scope.data.sc_cat_item.sys_id, c.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID).then(function (response) {
            var cartItemId = "";
            for (var i = 0; i < response.data.result.items.length; i++) {
                var item = response.data.result.items[i];
                if (item.catalog_item_id === $scope.data.sc_cat_item.sys_id) {
                    cartItemId = item.cart_item_id;
                    break;
                }
            }
            $rootScope.$broadcast("$sp.service_catalog.wishlist.add_item");
            $rootScope.$broadcast("$sp.service_catalog.wishlist.update", cartItemId);
            g_form.$private.userState.clearModifiedFields();
            $scope.data.showMsg = $scope.is_update_wishlist = true;
            $scope.data.is_wishlist_item = true;
            $scope.data.show_wishlist_msg = false;
            $scope.submitting = false;
            spUtil.scrollTo('#sc_cat_item', 300);
        });
    }

    $scope.triggerAddToCart = function (timeout) {
        $scope.data.sc_cat_item.item_action = "add_to_cart";
        $scope.data.sc_cat_item.quantity = c.quantity;
        $scope.$evalAsync(function () {
            if (g_form) {
                $scope.submitting = true;
                if (!g_form.submit()) {
                    timeout = timeout || 1000;
                    $timeout(function () {
                        $scope.$broadcast('$sp.service_catalog.form_submit_failed', {action_name: 'submit'});
                    }, timeout);
                }
            }

        })
        return false;
    }

    $scope.triggerUpdateCart = function (timeout) {
        $scope.data.sc_cat_item.item_action = "update_cart";
        $scope.data.sc_cat_item.quantity = c.quantity;
        $scope.$evalAsync(function () {
            if (g_form) {
                $scope.submitting = true;
                if (!g_form.submit()) {
                    timeout = timeout || 1000;
                    $timeout(function () {
                        $scope.$broadcast('$sp.service_catalog.form_submit_failed', {action_name: 'submit'});
                    }, timeout);
                }
            }

        })
        return false;
    }

    $scope.triggerOnSubmit = function (timeout) {
        if ($scope.options.isServiceWorkspace && $window.frameElement) {
            var workspaceParams = {};
            workspaceParams.sysparm_parent_table = $window.frameElement.getAttribute('parent-table');
            workspaceParams.sysparm_parent_sys_id = $window.frameElement.getAttribute('parent-sys-id');
            $scope.data.workspaceParams = workspaceParams;
        }
        $scope.data.sc_cat_item.item_action = "order";
        $scope.data.sc_cat_item.quantity = c.quantity;
        $scope.$evalAsync(function () {
            if (g_form) {
                $scope.submitting = true;
                if (!g_form.submit()) {
                    timeout = timeout || 1000;
                    $timeout(function () {
                        $scope.$broadcast('$sp.service_catalog.form_submit_failed', {action_name: 'submit'});
                    }, timeout);
                }
            }

        })
        return false;
    }

    function setFieldsReadonly() {
        var allFields = g_form.getFieldNames();
        for (var fieldName in allFields) {
            g_form.setReadonly(allFields[fieldName], true);
        }
    }

    // order / create request
    function getOne() {
        $scope.server.get({
            action: 'log_request',
            itemDetails: {
                sys_id: $scope.data.sc_cat_item.sys_id,
                name: $scope.data.sc_cat_item.name,
                sys_class_name: $scope.data.sc_cat_item.sys_class_name
            }
        });
        //Required to pass as payload for usage as embeddedWidget
        var embeddedWidgetOptions = {
            "auto_redirect": "true",
            "requested_for_id": "",
            "requested_for_display": ""
        };
        if ($scope.data.sc_cat_item.sys_class_name != "sc_cat_item_producer" && $scope.data.sc_cat_item.sys_class_name != "std_change_record_producer") {
            if ($scope.data.sys_properties.twostep && $scope.data.sc_cat_item.request_method != "submit") {
                var payload = {
                    cart: 'cart_' + $scope.data.sc_cat_item.sys_id,
                    itemDetails: {
                        sys_id: $scope.data.sc_cat_item.sys_id,
                        quantity: $scope.data.sc_cat_item.quantity,
                        fields: getVarData($scope.data.sc_cat_item._fields),
                        newRecordID: $scope.data._generatedItemGUID,
                        request_method: $scope.data.sc_cat_item.request_method
                    },
                    action: $scope.data.is_wishlist_item ? "order_wishlist_item" : "order_item",
                    workspaceParams: $scope.data.workspaceParams
                };
                for (var embeddedOption in embeddedWidgetOptions) {
                    payload[embeddedOption] = c.options[embeddedOption] || embeddedWidgetOptions[embeddedOption];
                }
                $scope.server.get(payload).then(function (response) {
                    var orderItemModalCtrl;
                    var unregister = $scope.$on('$sp.service_catalog.cart.cancel_order', function () {
                        $scope.submitting = false;
                        orderItemModalCtrl.close();
                    });
                    var closeModalOnSubmit = $scope.$on('$sp.service_catalog.cart.submitted', function () {
                        orderItemModalCtrl.close();
                        setFieldsReadonly();
                        $scope.submitted = true;
                    });
                    var orderItemModal = angular.copy(response.data.orderItemModal);
                    orderItemModal.options.afterOpen = function (ctrl) {
                        orderItemModalCtrl = ctrl;
                    };
                    orderItemModal.options.afterClose = function () {
                        unregister();
                        closeModalOnSubmit();
                        c.orderItemModal = null;
                        orderItemModalCtrl = null;
                    };
                    c.orderItemModal = orderItemModal;
                });
            } else {
                var additionalParms = {};
                if ($scope.data.workspaceParams) {
                    additionalParms.sysparm_parent_sys_id = $scope.data.workspaceParams.sysparm_parent_sys_id;
                    additionalParms.sysparm_parent_table = $scope.data.workspaceParams.sysparm_parent_table;
                }
                $scope.submitting = true;
                if ($scope.data.is_wishlist_item) {

                    spScUtil.orderWishlistedItem($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(function (response) {
                        var a = response.data.result;
                        $scope.$emit("$$uiNotification", a.$$uiNotification);
                        $scope.$emit("$sp.sc_cat_item.submitted", a);
                        $rootScope.$broadcast("$sp.service_catalog.wishlist.update");
                        if (c.options.auto_redirect == 'false') {
                            $scope.submitting = false;
                            $scope.submitted = true;
                            $rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
                            spUtil.addInfoMessage($scope.m.requestSubmitted);
                            return;
                        } else
                            $location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id);
                    });
                } else {
                    spScUtil.orderNow($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, additionalParms).then(function (response) {
                        var a = response.data.result;
                        $scope.$emit("$$uiNotification", a.$$uiNotification);
                        $scope.$emit("$sp.sc_cat_item.submitted", a);
                        if (c.options.auto_redirect == 'false') {
                            $scope.submitting = false;
                            $scope.submitted = true;
                            $rootScope.$broadcast("$sp.service_catalog.cart.submitted", true);
                            spUtil.addInfoMessage($scope.m.requestSubmitted);
                            return;
                        } else if (!$scope._atf)
                            $location.search('id=sc_request&is_new_order=true&table=sc_request&sys_id=' + a.sys_id);
                    });
                }
            }
        } else {
            postCatalogFormRequest().then(function (response) {
                var a = response.data.result;
                if (!$scope.options.isServiceWorkspace)
                    $scope.$emit("$$uiNotification", a.$$uiNotification);
                $scope.$emit("$sp.sc_cat_item.submitted", a);
                if ($scope.data.is_wishlist_item)
                    $rootScope.$broadcast("$sp.service_catalog.wishlist.update");
                if (c.options.auto_redirect == 'false') {
                    setFieldsReadonly();
                    $scope.submitted = true;
                } else if (!$scope._atf)
                    handleRedirect(a.number, a.table, a.sys_id, a.redirect_to, a.redirect_portal_url);
                $scope.submitting = false;
                $scope.submitButtonMsg = $scope.m.submittedMsg;
            });
        }
    }

    $scope.$on("$sp.sc_cat_item.submitted", function () {
        g_form.$private.userState.clearModifiedFields();
    });

    function addToCart() {
        $scope.server.get({
            action: 'log_request',
            itemDetails: {
                sys_id: $scope.data.sc_cat_item.sys_id,
                name: $scope.data.sc_cat_item.name,
                sys_class_name: $scope.data.sc_cat_item.sys_class_name
            }
        });

        postCatalogFormRequest().then(function (response) {
            $rootScope.$broadcast("$sp.service_catalog.cart.add_item");
            $rootScope.$broadcast("$sp.service_catalog.cart.update");
            $scope.$emit("$sp.sc_cat_item.add_to_cart", $scope.data._generatedItemGUID);
            if ($scope.data.is_wishlist_item) {
                $rootScope.$broadcast("$sp.service_catalog.wishlist.update");
                $scope.data.is_wishlist_item = false;
                if ($location.$$search.edit === "wishlist") {
                    $location.search("id=sc_wishlist");
                    return;
                }
            }
            g_form.$private.userState.clearModifiedFields();
            c.status = i18n.getMessage("Added item to shopping cart");
            $scope.server.get({action: 'init_item'}).then(function (response) {
                $scope.data._generatedItemGUID = response.data._generatedItemGUID;
                ah.setParams($scope.data._attachmentTable, $scope.data._generatedItemGUID, 1024 * 1024 * $scope.data.maxAttachmentSize);
                $scope.attachmentHandler.getAttachmentList();
                $scope.m.actionMsg = $scope.m.cartAddMsg + addLink('?id=sc_cart', $scope.m.viewCartMsg);
                $scope.m.actionMsg += '<i class="fa fa-close pull-right pointer close-notification" aria-label="${Close Notification}" tabindex="0" ng-click="c.hideCartMsg()"/>';
                $scope.m.actionMsg = $sce.trustAsHtml($scope.m.actionMsg);
                $scope.data.showMsg = true;
                $scope.submitting = false;
                cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function () {
                    $scope.submitting = false;
                });
                spUtil.scrollTo('#sc_cat_item', 300);
            });
        });
    }

    function updateCart() {
        postCatalogFormRequest().then(function (response) {
            g_form.$private.userState.clearModifiedFields();
            c.status = i18n.getMessage("Updated Item to shopping cart.");
            $location.search('id=sc_cart');
        })
    }

    function postCatalogFormRequest() {
        $scope.submitting = true;
        if ($scope.data.is_wishlist_item) {
            $scope.is_update_wishlist = false;
            $scope.data.show_wishlist_msg = false;
            if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
                return spScUtil.submitWishlistedProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, $scope.data.workspaceParams);
            else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
                return spScUtil.addWishlistedItemToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID);
        } else if ($scope.data.is_cart_item)
            return spScUtil.updateCart($scope.data._generatedItemGUID, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields));
        else if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer")
            return spScUtil.submitProducer($scope.data.sc_cat_item.sys_id, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID, $scope.data.workspaceParams);
        else if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer")
            return spScUtil.submitStdChgProducer($scope.data.sc_cat_item.sys_id, $scope.data.stdChg.twoStep, $scope.data.stdChg.currentVersion, $scope.data._generatedItemGUID, $scope.portal.url_suffix);
        else if ($scope.data.sc_cat_item.item_action === "add_to_cart")
            return spScUtil.addToCart($scope.data.sc_cat_item.sys_id, $scope.data.sc_cat_item.quantity, getVarData($scope.data.sc_cat_item._fields), $scope.data._generatedItemGUID);
    }

    // spModel populates mandatory - hasMandatory is called by the submit button
    $scope.hasMandatory = function () {
        return c.mandatory && c.mandatory.length > 0;
    };

    //	Listeners
    var cleanFailedSubmit = $scope.$on('$sp.service_catalog.form_submit_failed', function () {
        $scope.submitting = false;
    });

    // switch catalog items
    var unregister = $scope.$on('$sp.list.click', onListClick);
    $scope.$on("$destroy", function () {
        $rootScope.$broadcast("$sp.service_catalog.item.close");
        unregister();
    });

    function onListClick(evt, arg) {
        $scope.data.sys_id = arg.sys_id;
        spUtil.update($scope);
    }

    function formatRedirectUrl(page, table, sys_id) {
        var url;
        var paramObj = {page: page, table: table, sys_id: sys_id};
        url = spUtil.format(c.options.url, paramObj);
        return url;
    }

    $scope.saveAsDraft = function () {
		
		g_form.setValue('copied', false);
        g_form.setValue('state', '20');
        $scope.triggerOnSubmit();
    };
    
    $scope.saveAsSubmitted = function(){
		
		g_form.setValue('copied', false);
        g_form.setValue('state', '21');
        $scope.triggerOnSubmit();
    };
	
	$scope.submitAndCopy = function() {
		
		g_form.setValue('copied', true);
		g_form.setValue('state', '21');
        $scope.triggerOnSubmit();
	}

    function handleRedirect(n, table, sys_id, redirectTo, redirectUrl) {

        var page = 'form';
        if (table == 'sc_request')
            page = 'sc_request';
        else if (n)
            page = 'ticket';

        if (redirectTo == 'catalog_home')
            page = 'sc_home';

        //For Standard change, always direct to form if not in Workspace
        if ($scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
            if ($scope.options.isServiceWorkspace) {
                var params = {};
                params.msg = 'TARGET_RECORD_SELECTED';
                params.target_table = table;
                params.target_sys_id = -1;
                if (sys_id)
                    params.target_sys_id = sys_id;

                if ($scope.data.stdChg.twoStep)
                    params.target_query = 'type=standard^std_change_producer_version=' + $scope.data.stdChg.currentVersion;

                window.postMessage(params, location.origin);
                return;
            } else
                page = 'form';
        }

        if (c.options.page) {
            page = c.options.page;
        }
        if (c.options.table) {
            table = c.options.table;
        }
        var url = formatRedirectUrl(page, table, sys_id);
        if ($scope.data.sc_cat_item.sys_class_name === "sc_cat_item_producer" || $scope.data.sc_cat_item.sys_class_name === "std_change_record_producer") {
            if (redirectUrl) {
                $window.location.href = redirectUrl;
            } else {
                var newURL = $location.search(url);
                spAriaFocusManager.navigateToLink(newURL.url());
            }
            return;
        }
        $location.search(formatRedirectUrl('sc_request', 'sc_request', sys_id));
        return;
    }

    $timeout(function () {
        if ($document[0].getElementsByClassName('sc-sticky-item-header').length > 0) {
            var titleHeight = $document[0].getElementsByClassName('sc-sticky-item-header')[0].clientHeight;
			var shortDescriptElem = $document[0].getElementsByClassName('sc-cat-item-short-description')[0] ? $document[0].getElementsByClassName('sc-cat-item-short-description')[0].clientHeight : '';
            $scope.stickyHeaderTop = '-' + (titleHeight - 20 - shortDescriptElem) + 'px;';
        }
    });
}]]></client_script>
        <controller_as>c</controller_as>
        <css>.panel-button {&#13;
  float: none;&#13;
}&#13;
&#13;
.sp-attachment-add {&#13;
  padding: 5px;&#13;
}&#13;
&#13;
.p-t-none {&#13;
  padding-top: 0 !important;&#13;
}&#13;
&#13;
.file-list-wrap {&#13;
	margin-bottom: 10px;&#13;
}&#13;
&#13;
.sc-btn {&#13;
  color: $text-color;&#13;
}&#13;
&#13;
.dismiss-button {&#13;
  position: absolute;&#13;
  top: 1rem;&#13;
	right: 10px;&#13;
	color: $text-color;&#13;
	cursor: pointer;&#13;
}&#13;
&#13;
.item-header {&#13;
  padding-top: 10px !important;&#13;
  padding-bottom: 10px !important;&#13;
}&#13;
&#13;
.sc-item-description img {&#13;
  max-width: 100%;&#13;
  height: auto;&#13;
}&#13;
.sc-sticky-item-header {&#13;
  position: sticky;&#13;
  position: -webkit-sticky;&#13;
  position: -ms-sticky;&#13;
  top: -($font-size-h2 + $font-size-base);&#13;
  z-index: 10;&#13;
  background-color: inherit;&#13;
  border-radius: 4px 4px 0 0;&#13;
}&#13;
.sc-fixed {&#13;
  position: fixed;&#13;
  max-height: 100%;&#13;
  width: 17.67777%;&#13;
}&#13;
.no-margin {&#13;
	margin: 0px; &#13;
}&#13;
.sc-item-error-messages {&#13;
  max-height: 100%;&#13;
  position: absolute;&#13;
  overflow-y: auto;&#13;
  overflow-x: hidden;&#13;
  width: 100%; &#13;
}&#13;
.sc-field-error-label {&#13;
  margin-right: .5em; &#13;
  display: inline-block;&#13;
  cursor: pointer;&#13;
  background-color: $sc-field-error-color;&#13;
  text-overflow: ellipsis;&#13;
  overflow: hidden;&#13;
  white-space: nowrap;&#13;
}&#13;
.image-gallery {&#13;
  font-size: 8px;&#13;
  color: #CECECE;&#13;
  .active {&#13;
    color: #717171;&#13;
  }&#13;
  i {&#13;
    padding: 0 5px;&#13;
  }&#13;
}&#13;
.relative {&#13;
  position: relative;&#13;
}&#13;
.sc-order-widget-btn {&#13;
   position: absolute;&#13;
   left: 9%;&#13;
}&#13;
&#13;
.close-notification {&#13;
  	position: absolute;&#13;
  	top: 10px;&#13;
  	right: 18px;&#13;
}&#13;
@media only screen and (max-width : 992px) {&#13;
  .sc-fixed {&#13;
    position: relative;&#13;
    width: 100%;&#13;
  }&#13;
  .wishlist-update-message {&#13;
    display : block;&#13;
  }&#13;
  .sc-item-error-messages {&#13;
    position: relative;&#13;
  }&#13;
  .read-more, .read-less {&#13;
    font-size: 15px;&#13;
    cursor: pointer;&#13;
  }&#13;
  .more-text {&#13;
    display: none;&#13;
  }&#13;
  .inline-cart {&#13;
    display: none;&#13;
  }&#13;
  .right-side-cart {&#13;
    display: inherit !important;&#13;
  }&#13;
}&#13;
@media only screen and (max-width : 768px) {&#13;
  .sc-sticky-item-header {&#13;
     position: inherit;&#13;
  }&#13;
  &#13;
}&#13;
.inline-cart {&#13;
  .quantity-selector {&#13;
    display: inline-block;&#13;
    width: 65px;&#13;
    padding-top: 2px;&#13;
  }&#13;
}&#13;
.alert-success .link {&#13;
    text-decoration: underline;&#13;
}&#13;
&#13;
.alert-info-border {&#13;
	border-color: $alert-info-border;&#13;
}</css>
        <data_table>sp_instance</data_table>
        <demo_data/>
        <description/>
        <docs/>
        <field_list>color</field_list>
        <has_preview>false</has_preview>
        <id>cir-psi-catalog-item</id>
        <internal>false</internal>
        <link><![CDATA[function link(scope, element, attrs, controller) {  }]]></link>
        <name>CIR PSI Catalog Item</name>
        <option_schema>[{"name":"show_add_cart_button","section":"other","label":"Show Add Cart Button","type":"boolean"},{"hint":"If you turn on this, you will be able to see field validation messages on right side","name":"show_field_validation_messages","default_value":"true","section":"other","label":"Show field validation messages","type":"boolean"},{"hint":"Show Add/Update Wish List buttons","name":"show_add_to_wishlist_button","default_value":"true","section":"other","label":"Show Add/Update Wish List buttons","type":"boolean"},{"hint":"Order item section on top. If you uncheck this, order section will be displayed at bottom of screen","name":"display_cart_on_right","default_value":"true","section":"other","label":"Order Item Section On Top","type":"boolean"},{"hint":"Show item description in few words with an option to read more","name":"show_less_description","default_value":"true","section":"other","label":"Enable Show More/Less for Item description on Mobile","type":"boolean"},{"hint":"Hide the Delivery Time in the widget","name":"hide_delivery_time","section":"other","default_value":"false","label":"Hide Delivery Time","type":"boolean"}]</option_schema>
        <public>false</public>
        <roles>x_fru_cir.psi_global_manager,x_fru_cir.psi_internal_manager,x_fru_cir.psi_internal_user,x_fru_cir.psi_local_manager</roles>
        <script><![CDATA[(function () {
	// will get the table name associated to the record producer
	var grRP = new GlideRecord('sc_cat_item_producer');
	if(grRP.get($sp.getParameter("sys_id"))){
		data.tableName = grRP.table_name.toString();
	}
    var embeddedWidgetOptions = ['auto_redirect', 'requested_for_id', 'requested_for_display'];
		
	if(input && input.action == 'createIntPSI'){
		createIntPsi(input.currentObj);
	}
	
    if (input && input.action == "from_attachment")
        return;

    if (input && input.action == 'init_item') {
        data._generatedItemGUID = gs.generateGUID();
        return;
    } else if (input && input.action === "order_one_step") {

    } else if (input && input.action === "order_item") {
        //Minimum set of widget options supported for Embedded widget
        embeddedWidgetOptions.forEach(function (embeddedWidgetOption) {
            if (typeof input[embeddedWidgetOption] != 'undefined')
                options[embeddedWidgetOption] = input[embeddedWidgetOption];
        });
        data.orderItemModal = $sp.getWidget('widget-modal', {
            embeddedWidgetId: 'sc-checkout',
            embeddedWidgetOptions: {
                cart: {name: input.cart},
                action: 'order_now',
                item: input.itemDetails,
                requested_for: {id: options.requested_for_id, displayValue: options.requested_for_display},
                auto_redirect: options.auto_redirect,
                parentParams: input.workspaceParams
            },
            backdrop: 'static',
            keyboard: false,
            size: 'md'
        });
        return;
    } else if (input && input.action == "order_wishlist_item") {
        //Minimum set of widget options supported for Embedded widget
        embeddedWidgetOptions.forEach(function (embeddedWidgetOption) {
            if (typeof input[embeddedWidgetOption] != 'undefined')
                options[embeddedWidgetOption] = input[embeddedWidgetOption];
        });
        data.orderItemModal = $sp.getWidget('widget-modal', {
            embeddedWidgetId: 'sc-checkout',
            embeddedWidgetOptions: {
                cart: {name: input.cart},
                action: 'order_now_wishlisted_item',
                item: input.itemDetails,
                requested_for: {id: options.requested_for_id, displayValue: options.requested_for_display},
                auto_redirect: options.auto_redirect,
                parentParams: input.workspaceParams
            },
            backdrop: 'static',
            keyboard: false,
            size: 'md'
        });
        return;
    } else if (input && input.action === 'log_request') {
        $sp.logStat('Cat Item Request', input.itemDetails.sys_class_name, input.itemDetails.sys_id, input.itemDetails.name);
        return;
    }

    // portal can specify a catalog and catalog category home page
    var catalogID = $sp.getParameter("catalog_id") ? $sp.getParameter("catalog_id") + "" : "-1";
    data.sc_catalog_page = $sp.getDisplayValue("sc_catalog_page") || "sc_home";
    data.sc_category_page = $sp.getDisplayValue("sc_category_page") || "sc_category";
    var edit_parm = $sp.getParameter('edit');
    data.is_cart_item = edit_parm == 'cart';
    data.is_wishlist_item = edit_parm == 'wishlist';
    data.show_wishlist_msg = false;
    data.recordFound = true;
    options.show_add_cart_button = (options.show_add_cart_button == "true");

    var clGenerator = new GlideChoiceList();
    var choiceListQuantity = clGenerator.getChoiceList("sc_cart_item", "quantity");
    var choicelistQuantityData = [];
    for (var i = 0; i < choiceListQuantity.getSize(); i++) {
        var choice = choiceListQuantity.getChoice(i);
        if (!isNaN(choice.value)) {
            choicelistQuantityData.push({
                value: parseInt(choice.value, 10),
                label: choice.label
            });
        }
    }

    data.choiceListQuantity = choicelistQuantityData;
    data.quantity = choicelistQuantityData[0].value;
    if (options.page) {
		options.page = null;
        var pageGR = new GlideRecord("sp_page");
		if (pageGR.get(options.page)) {
			pageGR.getValue("id");
		}
    }
    if (options.table) {
		options.table = null;
        var tableGR = new GlideRecord("sys_db_object");
		if (tableGR.get(options.table)) {
			options.table = tableGR.getValue("name");
		}
    }
    options.url = options.url || "id={page}&is_new_order=true&table={table}&sys_id={sys_id}";

    data.showPrices = $sp.showCatalogPrices();
    var m = data.msgs = {};
		m.submitAsDraft = gs.getMessage('cir_psi_save_as_draft');
    m.submitMsg = gs.getMessage("cir_sit_submit");
	m.sumbitAndCopyMsg = gs.getMessage('cir_psi_submit_and_copy');
    m.renameSuccessMsg = gs.getMessage("cir_attachment_renamed_succesfully");
    m.deleteSuccessMsg = gs.getMessage("cir_attachment_deleted_succesfully");
    m.delete_attachment = gs.getMessage("cir_delete_attachment");
    data.maxAttachmentSize = parseInt(gs.getProperty("com.glide.attachment.max_size", 1024));
    if (isNaN(data.maxAttachmentSize))
        data.maxAttachmentSize = 24;
    m.largeAttachmentMsg = gs.getMessage("Attached files must be smaller than {0} - please try again", "" + data.maxAttachmentSize + "MB");

    var cartName = data.is_cart_item ? 'DEFAULT' : 'saved_items';
    var cart = new sn_sc.CartJS(cartName);

    if (edit_parm) {
        var cart_item_id = $sp.getParameter("sys_id");
        var gr = new GlideRecord("sc_cart_item");
        if (!gr.get(cart_item_id) || gr.cart != cart.getCartID()) {
            data.recordFound = false;
            return;
        }
        data.showWishlist = data.is_wishlist_item;
        var catItemData = {};
        catItemData.sys_id = gr.getValue('cat_item');
        catItemData.cart_item_id = gr.getUniqueValue();
        catItemData.table = "sc_cart_item";
        catItemData.is_ordering = true;
        data.sc_cat_item = $sp.getCatalogItem(catItemData);
        data.sc_cat_item.isCartItem = true;
        data.sc_cat_item.cart_guide = gr.getValue('order_guide');
        data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
        if (!data.hideDeliveryTime)
            data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');

        var values = getValues(cart_item_id);
        for (var f in data.sc_cat_item._fields) {
            // Put the values into the cat item fields
            var field = data.sc_cat_item._fields[f];
            if (typeof values[f] != "undefined" && typeof values[f].value != "undefined") {
                if (values[f].type == 9 || values[f].type == 10)
                    field.value = values[f].displayValue;
                else if (values[f].type == 25)
                    field.value = values[f].decrypted_value;
                else
                    field.value = values[f].value;
                field.displayValue = values[f].displayValue;
                field.display_value_list = values[f].display_value_list;
            }
            updatePriceOnField(field);

        }
        data._generatedItemGUID = cart_item_id;
        data.quantity = '' + gr.quantity;
    } else {

        if (input)
            data.sys_id = input.sys_id;
        else if (options.sys_id)
            data.sys_id = options.sys_id;
        else
            data.sys_id = $sp.getParameter("sys_id") || $sp.getParameter('sl_sys_id');

        if (!data.sys_id) {
            data.recordFound = false;
            return;
        }

        data._generatedItemGUID = gs.generateGUID();
        var validatedItem = new sn_sc.CatItem('' + data.sys_id);
        if (!validatedItem.canView() || !validatedItem.isVisibleServicePortal()) {
            data.recordFound = false;
            return;
        }

        data.sc_cat_item = $sp.getCatalogItem(String(data.sys_id), true);
		data.psi_category	= getPsiCategory();
		data.category_id = data.psi_category.sys_id + '';
		data.category_name = data.psi_category.name + '';
		data.category_shrt_desc = data.psi_category.short_description + '';
		data.category_image = data.psi_category.icon ? data.psi_category.icon+ '.iix' : '';
		data.category_description = data.psi_category.description + '';
        data.hideDeliveryTime = data.sc_cat_item.no_delivery_time;
        if (!data.hideDeliveryTime)
            data.hideDeliveryTime = (options.hide_delivery_time == "true" || data.sc_cat_item.sys_class_name == 'sc_cat_item_producer' || data.sc_cat_item.sys_class_name == 'sc_cat_item_guide' || data.sc_cat_item.sys_class_name == 'std_change_record_producer');

        if (data.sc_cat_item.category) {
            var categoryJS;
            var categoryID = validatedItem.getFirstAccessibleCategoryForSearch((catalogID && catalogID != "-1") ? catalogID : $sp.getCatalogs().value + "");
            if (GlideStringUtil.isEligibleSysID($sp.getParameter("sysparm_category"))) {
                categoryJS = new sn_sc.CatCategory($sp.getParameter("sysparm_category") + "");
                categoryID = $sp.getParameter("sysparm_category") + "";
            } else if (categoryID) {
                categoryJS = new sn_sc.CatCategory(categoryID);
            }
            if (categoryJS && GlideStringUtil.isEligibleSysID(categoryJS.getID())) {
                if (categoryJS.getCatalog()) {
                    catalogID = categoryJS.getCatalog();
                    data.catalog_id = catalogID;
                    var catalogObj = new sn_sc.Catalog(catalogID);
                    data.sc_catalog = catalogObj.getTitle();
                    data.showWishlist = new sn_sc.Catalog('' + catalogID).isWishlistEnabled();
                }
                data.category = {
                    name: categoryJS.getTitle(),
                    url: '?id=' + data.sc_category_page + '&sys_id=' + categoryID
                };
                data.categories = [];
                data.categories.push({
                    label: categoryJS.getTitle(),
                    url: '?id=' + data.sc_category_page + '&sys_id=' + categoryID
                });
                while (categoryJS.getParent()) {
                    var parentId = categoryJS.getParent();
                    categoryJS = new sn_sc.CatCategory(parentId);
                    var category = {
                        label: categoryJS.getTitle(),
                        url: '?id=' + data.sc_category_page + '&sys_id=' + parentId
                    };
                    data.categories.unshift(category);
                }
                if ((($sp.getCatalogs().value + "").split(",")).length > 1) {
                    data.all_catalog_msg = gs.getMessage("All Catalogs");
                }
            }
        }

        var gr = new GlideRecord('sc_cart_item');
        gr.addQuery('cart', cart.getCartID());
        gr.addQuery('cat_item', data.sys_id);
        gr.query();
        if (gr.next() && !options.isServiceWorkspace)
            data.show_wishlist_msg = true;
    }
    data.sys_properties = {
        twostep: gs.getProperty("glide.sc.sp.twostep", "true") == 'true'
    };
    var athTblName = 'sc_cart_item';
    var className = data.sc_cat_item.sys_class_name;
    if (!new global.CatalogItemTypeProcessor().canCreateNormalCartItem(className)) {
        if (className == 'sc_cat_item_producer' || className == 'std_change_record_producer') {
            var gr = new GlideRecord(className);
            if (gr.get(data.sc_cat_item.sys_id) && gr.isValidRecord()) {
				athTblName = gr.getValue('table_name');
			}
        }
    }

    data._attachmentTable = athTblName;
    data.stdChg = {};
    if (className === 'std_change_record_producer') {
        //Populate scope with the porperty for two step
        data.stdChg.twoStep = false;
        var twoStepProp = new global.StdChangeUtils().getValue('two_step') + '';
        if (twoStepProp)
            data.stdChg.twoStep = twoStepProp === '1';
        var stdChgProducerGr = new GlideRecord('std_change_record_producer');
		if (stdChgProducerGr.get(data.sc_cat_item.sys_id) && stdChgProducerGr.isValidRecord()) {
			data.stdChg.currentVersion = stdChgProducerGr.getValue('current_version');
		}
    }

    $sp.logStat('Cat Item View', data.sc_cat_item.sys_class_name, data.sc_cat_item.sys_id, data.sc_cat_item.name);

    function getValues(sys_id) {
        var qs = new sn_sc.VariablePoolQuestionSetJS();
        qs.setCartID(sys_id);
        qs.load();
        var values = {};
        var questions = qs.getFlatQuestions();
        for (var i = 0; i < questions.length; i++) {
            var qKey = questions[i].name;
            if (typeof qKey == 'undefined' || qKey == '')
                qKey = "IO:" + questions[i].sys_id;
            values[qKey] = questions[i];
        }
        return values;
    }

    function setPrice(field, p, rp) {
        if (p != undefined)
            field.price = p;
        if (rp != undefined)
            field.recurring_price = rp;
    }

    function updatePriceForReferenceTable(field) {
        var tableName = field.refTable + '';
        if (tableName != undefined && tableName != null && tableName != '') {
            var gr = new GlideRecordSecure(tableName);
            if (gr.isValid() && gr.get(field.value) && gr.isValidRecord()) {
				updatePrice(gr, field);
				updateRecurringPrice(gr, field);
            }
        }
    }

    function updatePriceForListCollector(field) {
        var tableName = field.refTable + '';
        if (tableName != undefined && tableName != null && tableName != '') {
            var gr = new GlideRecordSecure(tableName);
            if (gr.isValid()) {
                var values = field.value.split(',');
                gr.addQuery('sys_id', values);
                gr.query();
                var p = 0.0;
                var rp = 0.0;
                var price_value_list = [];
                while (gr.next()) {
                    var price_field = {};
                    updatePrice(gr, price_field);
                    updateRecurringPrice(gr, price_field);
                    if (price_field.price)
                        p += Number(price_field.price);
                    else
                        price_field.price = 0.0;
                    if (price_field.recurring_price)
                        rp += Number(price_field.recurring_price);
                    else
                        price_field.recurring_price = 0.0;
                    price_value_list.push(price_field);
                }
                field.price = p;
                field.recurring_price = rp;
                field.price_value_list = price_value_list;
            }
        }
    }

    function updatePrice(gr, field) {
        if (gr.isValidField('price'))
            field.price = gr.getValue('price');
        else if (gr.isValidField('u_price'))
            field.price = gr.getValue('u_price');
    }

    function updateRecurringPrice(gr, field) {
        if (gr.isValidField('recurring_price'))
            field.recurring_price = gr.getValue('recurring_price');
        else if (gr.isValidField('u_recurring_price'))
            field.recurring_price = gr.getValue('u_recurring_price');
    }

    function updatePriceOnField(field) {
        if (field.type == 'boolean' || field.type == 'boolean_confirm') {
            if (field.value == 'true' || field.value == true)
                setPrice(field, field._pricing.price_if_checked, field._pricing.recurring_price_if_checked);
            else
                setPrice(field, 0, 0);
        } else if (field.choices) {
            field.choices.forEach(function (choice) {
                if (choice.value + '' == field.value + '')
                    setPrice(field, choice.price, choice.recurring_price);
            });
        } else if (field._pricing && field._pricing.pricing_implications === true) {
            if (field.type == 'reference')
                updatePriceForReferenceTable(field);
            else if (field.type == 'glide_list')
                updatePriceForListCollector(field);
        }
    }
	
	function getPsiCategory() {
		var gr = new GlideRecord(CIRConstants.Tables.PSI_CATEGORY);
		if(gr.get($sp.getParameter("category"))) {
			return gr;
		}
	}

	function createIntPsi(currentObj) {
		var psiGr = new GlideRecord(CIRConstants.Tables.PSI_INTERNAL);
		psiGr.initialize();
		new CIRPSIUtils().CreateFromRP(psiGr, currentObj, CIRConstants.Tables.PSI_INTERNAL);		
	}
})();]]></script>
        <servicenow>false</servicenow>
        <sys_class_name>sp_widget</sys_class_name>
        <sys_created_by>hugo.reis</sys_created_by>
        <sys_created_on>2020-07-08 09:46:36</sys_created_on>
        <sys_id>cc097a3adb31d010bf9ead8ed3961910</sys_id>
        <sys_mod_count>5</sys_mod_count>
        <sys_name>CIR PSI Catalog Item</sys_name>
        <sys_package display_value="Corporate Incident Response" source="x_fru_cir">265c101f13ab44100b8670a76144b0a2</sys_package>
        <sys_policy/>
        <sys_scope display_value="Corporate Incident Response">265c101f13ab44100b8670a76144b0a2</sys_scope>
        <sys_update_name>sp_widget_cc097a3adb31d010bf9ead8ed3961910</sys_update_name>
        <sys_updated_by>Paulo.Gomes@fruitionpartners.pt</sys_updated_by>
        <sys_updated_on>2020-08-10 09:24:22</sys_updated_on>
        <template><![CDATA[<div id="sc_cat_item" ng-if="::data.recordFound" sn-atf-blacklist="IS_SERVICE_CATALOG">
    <sp-widget widget="c.orderItemModal" ng-if="c.orderItemModal"></sp-widget>
    <div class="row" ng-if="::data.sc_cat_item" >
        <div class="col-sm-12" ng-class="{true: 'col-md-9', false: 'col-md-12'}[options.display_cart_on_right === 'true']" id="catItemTop">
            <!-- Info Message Box -->

            <!--	Success Message Box	-->
            <div class="alert alert-success" ng-if="data.showMsg" sc-bind-html-compile="m.actionMsg">
            </div>
            <div class="panel panel-default">
                <!-- Title Section -->
                <div class="wrapper-md b-b break-word item-header" ng-class="{true: '', false: 'sc-sticky-item-header'}[!c.data.sc_cat_item.short_description]" style="top: {{stickyHeaderTop}}">
                    <h1 class="h2 m-t-none m-b-sm font-thin" ng-if="::data.category_name">{{::data.category_name}}</h1>
                    <div class="text-muted sc-cat-item-short-description" ng-if="::data.category_shrt_desc">{{::data.category_shrt_desc}}</div>
                </div>
                <div class="wrapper-md row b-b no-margin" ng-if="c.data.category_image || c.data.category_description">
                    <div class="col-xs-12 padder-md break-word"
                         ng-class="{true: 'col-sm-12 no-padder', false: 'col-sm-8'}[!c.data.sc_cat_item.picture]" style="padding: 0 !important;">
                        <div class="visible-md visible-lg" ng-class="{false : 'visible-xs visible-sm', true : 'hidden-xs hidden-sm'}[c.options.show_less_description === 'true']">
                            <div ng-bind-html="::c.data.category_description" class="sc-item-description"></div>
                        </div>
                        <div class="col-xs-12 col-sm-12 visible-xs visible-sm" ng-if="c.options.show_less_description === 'true'">
                            <sc-toggle-data sn-data="::c.data.category_description"></sc-toggle-data>
                        </div>
                    </div>
                </div>
                <div class="" ng-class="{'b-b wrapper-md': !data.no_fields}">
                    <sp-cat-item item="::data.sc_cat_item" ></sp-cat-item>
                    <form>
                        <!-- display view and model -->
                        <sp-model form-model="::data.sc_cat_item" mandatory="c.mandatory"></sp-model>
                    </form>
                </div>
                <!-- Bottom cart -->
                <div ng-if="c.showAttachments()" class="wrapper-md row no-margin">
                    <now-attachments-list template="sp_attachment_single_line" ></now-attachments-list>
                    <label ng-if="!submitting && !submitted" style="float:right;font-weight:normal;cursor:pointer;">
                        <sp-attachment-button></sp-attachment-button>
                        <span class="fa fa-asterisk mandatory"
                              ng-if="data.sc_cat_item.mandatory_attachment"
                              ng-class="{'mandatory-filled': data.sc_cat_item.mandatory_attachment && (data.sc_cat_item.attachment_submitted || attachments.length > 0)}"
                              style="vertical-align:super"></span>
                        <span>${Add attachments}</span>
                    </label>

                </div>
            </div>
        </div>
        <!-- Right side content -->
        <div class="col-sm-12 col-md-3 right-side-cart" ng-show="::options.display_cart_on_right === 'true'">
            <!-- Right side cart( If you are chaning anything here, please change in bottom cart section also) -->
            <div ng-class="{true:'sc-fixed', false:'' }[options.display_cart_on_right === 'true']">
                <div ng-if="data.sc_cat_item.sys_class_name != 'sc_cat_item_content'" class="panel panel-{{::options.color}} b wrapper-md">
                    <div ng-if="::c.allowOrder()">
                        <select id="catItemQuantity"
                                ng-if="c.showQuantitySelector()"
                                ng-disabled="submitting || submitted"
                                class="m-b sn-select-basic"
                                ng-model="c.quantity"
                                aria-label="${Quantity}">
                            <option ng-repeat="num in data.choiceListQuantity" value={{::num.value}}>{{::num.label}}</option>
                        </select>
                    </div>
                    <div class="form-group relative" ng-if="c.showAddToWishlist()">
                        <button ng-if="!data.is_wishlist_item" name="add_to_wishlist" ng-click="addToWishlist()" ng-disabled="submitting || submitted" class="btn btn-default sc-btn form-control">
                            <i class="icon icon-sp-wishlist sc-order-widget-btn pull-left" style="top:5px"></i>
                            ${Add to Wish List}
                        </button>
                        <button ng-if="data.is_wishlist_item" name="update_wishlist" ng-click="addToWishlist()" ng-disabled="submitting || submitted" class="btn btn-default sc-btn form-control">
                            <i class="icon icon-sp-wishlist sc-order-widget-btn pull-left" style="top:5px"></i>
                            ${Update Wish List}
                        </button>
                    </div>
                    <div class="form-group m-b-xs">
                        <button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" ng-disabled="submitting || submitted" ng-click="saveAsSubmitted()" class="btn btn-primary btn-block">{{::submitButtonMsg}}</button>
                    </div>
                    <div class="form-group m-b-xs">
                        <button ng-if="::c.showOrderNowButton()" tabindex="0" name="submit" ng-disabled="submitting || submitted" ng-click="saveAsDraft()" class="btn btn-primary btn-block">{{::saveAsDraftButtonMsg}}</button>
                    </div>
                     <div class="form-group m-b-xs">
                        <button ng-if="::c.showSubmitAndStay()" tabindex="0" name="submit" ng-disabled="submitting || submitted" ng-click="submitAndCopy()" class="btn btn-primary btn-block">{{::submitAndCopyButtonMsg}}</button>
                        <span ng-if="submitting" style="padding-left:4px">${Submitting...}</span>
                    </div>
                </div>
                <div class="sc-item-error-messages" ng-if="c.options.show_field_validation_messages === 'true'">
                    <div class="row" ng-if="hasMandatory(c.mandatory)" class=" row alert alert-info-border" style="margin-top: .5em">
                        <div class="col-sm-12">
                            <div ng-if="hasMandatory(c.mandatory)">${Required information} </div>
                            <label ng-repeat="f in c.mandatory" class="label sc-field-error-label">{{::f.label}}</label>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="sr-only" aria-live="assertive">{{::c.status}}</div>
</div>
<div ng-if="::!data.recordFound" class="alert alert-info">{{::m.invalidRecordMsg}}</div>
<now-message key="Added item to shopping cart" value="${Added item to shopping cart}"/>
<now-message key="Attachment(s) are not added" value="${Attachment(s) are not added}"/>
<now-message key="Leave page?" value="${Leave page?}"/>
<now-message key="Changes you made will be lost." value="${Changes you made will be lost.}"/>
<now-message key="Cancel" value="${Cancel}"/>
<now-message key="Leave" value="${Leave}"/>]]></template>
    </sp_widget>
</record_update>
